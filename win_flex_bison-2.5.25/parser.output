Terminals unused in grammar

    INTERFACE
    CONSTRUCTOR
    NEW
    THIS
    DELETE
    EXPORT
    OF
    IN
    CONTINUE
    INCREMENT
    DECREMENT
    DECLARE
    IS


State 8 conflicts: 1 shift/reduce
State 14 conflicts: 1 shift/reduce
State 19 conflicts: 1 shift/reduce
State 30 conflicts: 1 shift/reduce
State 36 conflicts: 1 shift/reduce
State 47 conflicts: 1 shift/reduce
State 94 conflicts: 1 shift/reduce
State 97 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce
State 147 conflicts: 1 shift/reduce
State 165 conflicts: 2 shift/reduce
State 168 conflicts: 1 shift/reduce
State 185 conflicts: 1 shift/reduce
State 219 conflicts: 1 shift/reduce
State 220 conflicts: 1 shift/reduce
State 221 conflicts: 1 shift/reduce
State 223 conflicts: 1 shift/reduce
State 263 conflicts: 1 shift/reduce
State 264 conflicts: 1 shift/reduce
State 311 conflicts: 1 shift/reduce
State 325 conflicts: 1 shift/reduce
State 333 conflicts: 1 shift/reduce
State 343 conflicts: 24 shift/reduce
State 359 conflicts: 1 shift/reduce
State 381 conflicts: 1 shift/reduce
State 415 conflicts: 1 shift/reduce
State 416 conflicts: 1 shift/reduce
State 429 conflicts: 1 shift/reduce
State 430 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program_elem
    2        | program program_elem

    3 program_elem: class_declaration
    4             | function_declaration

    5 endl: ENDL
    6     | endl ENDL

    7 endl_opt: %empty
    8         | endl

    9 stmt_sep: ';'
   10         | endl

   11 expr_list: expr
   12          | expr_list endl_opt ',' endl_opt expr

   13 expr_list_opt: %empty
   14              | expr_list

   15 expr: expr POST_DECREMENT
   16     | PREF_DECREMENT endl_opt expr
   17     | expr POST_INCREMENT
   18     | PREF_INCREMENT endl_opt expr
   19     | ID AS endl_opt type
   20     | '-' endl_opt expr
   21     | '+' endl_opt expr
   22     | NUMBER_LITERAL
   23     | STRING_LITERAL
   24     | TRUE_LITERAL
   25     | FALSE_LITERAL
   26     | ID
   27     | '(' endl_opt expr endl_opt ')'
   28     | ID '(' expr_list_opt ')'
   29     | expr '+' endl_opt expr
   30     | expr '-' endl_opt expr
   31     | expr '*' endl_opt expr
   32     | expr '/' endl_opt expr
   33     | expr '%' endl_opt expr
   34     | expr '<' endl_opt expr
   35     | expr '>' endl_opt expr
   36     | expr LESS_OR_EQUAL endl_opt expr
   37     | expr GREATER_OR_EQUAL endl_opt expr
   38     | expr EQUALS endl_opt expr
   39     | expr NOT_EQUALS endl_opt expr
   40     | expr '=' endl_opt expr
   41     | expr PLUS_ASSIGN endl_opt expr
   42     | expr MINUS_ASSIGN endl_opt expr
   43     | expr MUL_ASSIGN endl_opt expr
   44     | expr DIV_ASSIGN endl_opt expr
   45     | expr MOD_ASSIGN endl_opt expr
   46     | NOT endl_opt expr
   47     | expr AND endl_opt expr
   48     | expr OR endl_opt expr
   49     | expr '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr '[' endl_opt expr endl_opt ']'
   51     | expr '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr '.' endl_opt ID

   53 block_statement: '{' endl_opt stmt_list_opt '}'

   54 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement
   55        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep
   56        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt block_statement
   57        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt expr stmt_sep
   58        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt block_statement
   59        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt expr stmt_sep

   60 while_stmt: WHILE endl_opt '(' endl_opt expr endl_opt ')' endl_opt stmt
   61           | WHILE endl_opt '(' endl_opt expr endl_opt ')' endl_opt empty_stmt

   62 do_while_stmt: DO endl_opt stmt endl_opt WHILE endl_opt '(' endl_opt expr endl_opt ')'
   63              | DO endl_opt empty_stmt endl_opt WHILE endl_opt '(' endl_opt expr endl_opt ')'

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

   66 switch_stmt: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list endl_opt '}'

   67 case_list: case_stmt
   68          | case_list case_stmt

   69 case_stmt: CASE endl_opt expr endl_opt ':' endl_opt stmt endl_opt break_opt
   70          | CASE endl_opt expr endl_opt ':' endl_opt empty_stmt endl_opt break_opt
   71          | DEFAULT endl_opt ':' endl_opt stmt endl_opt break_opt
   72          | DEFAULT endl_opt ':' endl_opt empty_stmt endl_opt break_opt

   73 break_opt: %empty
   74          | BREAK stmt_sep

   75 return_statement: RETURN expr stmt_sep

   76 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt stmt_list_opt endl_opt '}'
   77                     | FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt endl_opt '}'

   78 try_catch_block: TRY endl_opt block_statement endl_opt catch_clause

   79 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ')' endl_opt block_statement
   80             | CATCH endl_opt '(' endl_opt ID endl_opt ':' endl_opt error_type endl_opt ')' endl_opt block_statement

   81 error_type: UNKNOWN
   82           | ANY

   83 stmt_list_opt: %empty
   84              | stmt_list endl_opt

   85 stmt_list: stmt
   86          | empty_stmt
   87          | stmt_list stmt
   88          | stmt_list empty_stmt

   89 stmt: expr stmt_sep
   90     | if_stmt
   91     | while_stmt
   92     | for_stmt
   93     | do_while_stmt stmt_sep
   94     | switch_stmt
   95     | try_catch_block
   96     | block_statement
   97     | var_declaration stmt_sep
   98     | enum_declaration
   99     | return_statement

  100 empty_stmt: ';'

  101 modifier: LET
  102         | CONST

  103 type: NUMBER
  104     | STRING
  105     | BOOLEAN
  106     | ANY
  107     | UNKNOWN
  108     | VOID
  109     | ID

  110 type_mark: ':' endl_opt type

  111 type_mark_opt: %empty
  112              | type_mark

  113 variable: ID endl_opt type_mark_opt

  114 var_init_opt: %empty
  115             | endl_opt '=' endl_opt expr

  116 var_list: variable var_init_opt
  117         | var_list endl_opt ',' endl_opt variable var_init_opt

  118 var_declaration: modifier endl_opt var_list
  119                | modifier ID endl_opt type_mark endl_opt dimensions_list
  120                | modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']'

  121 dimensions: '[' endl_opt ']'

  122 dimensions_list: dimensions
  123                | dimensions_list dimensions

  124 param: ID endl_opt type_mark

  125 optional_param: ID endl_opt '?' endl_opt type_mark

  126 param_list: param
  127           | param_list endl_opt ',' endl_opt param
  128           | optional_param
  129           | param_list endl_opt ',' endl_opt optional_param

  130 param_list_0_or_more: '(' endl_opt param_list endl_opt ')'
  131                     | '(' ')'

  132 extends_decl: %empty
  133             | EXTENDS endl_opt ID

  134 implements_decl_opt: %empty
  135                    | implements_decl

  136 implements_decl: IMPLEMENTS endl_opt ID
  137                | implements_decl endl_opt ',' endl_opt ID

  138 property_modifier: visibility
  139                  | visibility READONLY
  140                  | READONLY
  141                  | visibility STATIC
  142                  | STATIC
  143                  | visibility STATIC READONLY

  144 visibility: PRIVATE
  145           | PROTECTED
  146           | PUBLIC

  147 class_member: property_modifier expr endl_opt stmt_sep
  148             | function_declaration
  149             | class_declaration

  150 class_visibility_member: class_member
  151                        | visibility endl_opt class_member

  152 class_visibility_member_list: class_visibility_member
  153                             | class_visibility_member_list endl_opt class_visibility_member

  154 class_body: %empty
  155           | class_visibility_member_list

  156 class_declaration: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}'

  157 enum_declaration: ENUM endl_opt ID endl_opt '{' endl_opt id_list endl_opt '}'

  158 id_list: ID var_init_opt
  159        | id_list endl_opt ',' endl_opt ID var_init_opt


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 33
    '(' (40) 27 28 51 54 55 56 57 58 59 60 61 62 63 64 65 66 79 80 130 131
    ')' (41) 27 28 51 54 55 56 57 58 59 60 61 62 63 64 65 66 79 80 130 131
    '*' (42) 31
    '+' (43) 21 29
    ',' (44) 12 117 127 129 137 159
    '-' (45) 20 30
    '.' (46) 51 52
    '/' (47) 32
    ':' (58) 49 69 70 71 72 80 110
    ';' (59) 9 64 65 100
    '<' (60) 34
    '=' (61) 40 115 120
    '>' (62) 35
    '?' (63) 49 125
    '[' (91) 50 120 121
    ']' (93) 50 120 121
    '{' (123) 53 66 76 77 156 157
    '}' (125) 53 66 76 77 156 157
    error (256)
    INTERFACE (258)
    IMPLEMENTS (259) 136
    CONSTRUCTOR (260)
    NEW (261)
    EXTENDS (262) 133
    THIS (263)
    CLASS (264) 156
    STATIC (265) 141 142 143
    RETURN (266) 75
    DELETE (267)
    EXPORT (268)
    PUBLIC (269) 146
    PROTECTED (270) 145
    PRIVATE (271) 144
    READONLY (272) 139 140 143
    DO (273) 62 63
    IF (274) 54 55 56 57 58 59
    ELSE (275) 56 57 58 59
    FOR (276) 64 65
    OF (277)
    IN (278)
    WHILE (279) 60 61 62 63
    BREAK (280) 74
    CONTINUE (281)
    DEFAULT (282) 71 72
    SWITCH (283) 66
    CASE (284) 69 70
    TRY (285) 78
    CATCH (286) 79 80
    INCREMENT (287)
    DECREMENT (288)
    LET (289) 101
    CONST (290) 102
    FUNC (291) 76 77
    DECLARE (292)
    UNKNOWN (293) 81 107
    ANY (294) 82 106
    NUMBER (295) 103
    STRING (296) 104
    VOID (297) 108
    BOOLEAN (298) 105
    ENUM (299) 157
    NUMBER_LITERAL (300) 22
    STRING_LITERAL (301) 23
    TRUE_LITERAL (302) 24
    FALSE_LITERAL (303) 25
    ID (304) 19 26 28 51 52 76 77 79 80 109 113 119 120 124 125 133 136 137 156 157 158 159
    ENDL (305) 5 6
    PLUS_ASSIGN (306) 41
    MINUS_ASSIGN (307) 42
    MUL_ASSIGN (308) 43
    DIV_ASSIGN (309) 44
    MOD_ASSIGN (310) 45
    OR (311) 48
    AND (312) 47
    EQUALS (313) 38
    NOT_EQUALS (314) 39
    LESS_OR_EQUAL (315) 36
    GREATER_OR_EQUAL (316) 37
    IS (317)
    AS (318) 19
    PREF_INCREMENT (319) 18
    PREF_DECREMENT (320) 16
    POST_INCREMENT (321) 17
    POST_DECREMENT (322) 15
    NOT (323) 46
    UPLUS (324)
    UMINUS (325)


Nonterminals, with rules where they appear

    $accept (90)
        on left: 0
    program (91)
        on left: 1 2
        on right: 0 2
    program_elem (92)
        on left: 3 4
        on right: 1 2
    endl (93)
        on left: 5 6
        on right: 6 8 10
    endl_opt (94)
        on left: 7 8
        on right: 12 16 18 19 20 21 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 72 76 77 78 79 80 84 110 113 115 117 118 119 120 121 124 125 127 129 130 133 136 137 147 151 153 156 157 159
    stmt_sep (95)
        on left: 9 10
        on right: 55 57 58 59 74 75 89 93 97 147
    expr_list (96)
        on left: 11 12
        on right: 12 14
    expr_list_opt (97)
        on left: 13 14
        on right: 28 51 120
    expr (98)
        on left: 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52
        on right: 11 12 15 16 17 18 20 21 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 54 55 56 57 58 59 60 61 62 63 64 65 66 69 70 75 89 115 147
    block_statement (99)
        on left: 53
        on right: 54 56 57 58 78 79 80 96
    if_stmt (100)
        on left: 54 55 56 57 58 59
        on right: 90
    while_stmt (101)
        on left: 60 61
        on right: 91
    do_while_stmt (102)
        on left: 62 63
        on right: 93
    for_stmt (103)
        on left: 64 65
        on right: 92
    switch_stmt (104)
        on left: 66
        on right: 94
    case_list (105)
        on left: 67 68
        on right: 66 68
    case_stmt (106)
        on left: 69 70 71 72
        on right: 67 68
    break_opt (107)
        on left: 73 74
        on right: 69 70 71 72
    return_statement (108)
        on left: 75
        on right: 99
    function_declaration (109)
        on left: 76 77
        on right: 4 148
    try_catch_block (110)
        on left: 78
        on right: 95
    catch_clause (111)
        on left: 79 80
        on right: 78
    error_type (112)
        on left: 81 82
        on right: 80
    stmt_list_opt (113)
        on left: 83 84
        on right: 53 76 77
    stmt_list (114)
        on left: 85 86 87 88
        on right: 84 87 88
    stmt (115)
        on left: 89 90 91 92 93 94 95 96 97 98 99
        on right: 60 62 64 69 71 85 87
    empty_stmt (116)
        on left: 100
        on right: 61 63 65 70 72 86 88
    modifier (117)
        on left: 101 102
        on right: 118 119 120
    type (118)
        on left: 103 104 105 106 107 108 109
        on right: 19 110
    type_mark (119)
        on left: 110
        on right: 76 112 119 120 124 125
    type_mark_opt (120)
        on left: 111 112
        on right: 113
    variable (121)
        on left: 113
        on right: 116 117
    var_init_opt (122)
        on left: 114 115
        on right: 116 117 158 159
    var_list (123)
        on left: 116 117
        on right: 117 118
    var_declaration (124)
        on left: 118 119 120
        on right: 97
    dimensions (125)
        on left: 121
        on right: 122 123
    dimensions_list (126)
        on left: 122 123
        on right: 119 120 123
    param (127)
        on left: 124
        on right: 126 127
    optional_param (128)
        on left: 125
        on right: 128 129
    param_list (129)
        on left: 126 127 128 129
        on right: 127 129 130
    param_list_0_or_more (130)
        on left: 130 131
        on right: 76 77
    extends_decl (131)
        on left: 132 133
        on right: 156
    implements_decl_opt (132)
        on left: 134 135
        on right: 156
    implements_decl (133)
        on left: 136 137
        on right: 135 137
    property_modifier (134)
        on left: 138 139 140 141 142 143
        on right: 147
    visibility (135)
        on left: 144 145 146
        on right: 138 139 141 143 151
    class_member (136)
        on left: 147 148 149
        on right: 150 151
    class_visibility_member (137)
        on left: 150 151
        on right: 152 153
    class_visibility_member_list (138)
        on left: 152 153
        on right: 153 155
    class_body (139)
        on left: 154 155
        on right: 156
    class_declaration (140)
        on left: 156
        on right: 3 149
    enum_declaration (141)
        on left: 157
        on right: 98
    id_list (142)
        on left: 158 159
        on right: 157 159


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1
    FUNC   shift, and go to state 2

    program               go to state 3
    program_elem          go to state 4
    function_declaration  go to state 5
    class_declaration     go to state 6


State 1

  156 class_declaration: CLASS . endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 9


State 2

   76 function_declaration: FUNC . endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt stmt_list_opt endl_opt '}'
   77                     | FUNC . endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 10


State 3

    0 $accept: program . $end
    2 program: program . program_elem

    $end   shift, and go to state 11
    CLASS  shift, and go to state 1
    FUNC   shift, and go to state 2

    program_elem          go to state 12
    function_declaration  go to state 5
    class_declaration     go to state 6


State 4

    1 program: program_elem .

    $default  reduce using rule 1 (program)


State 5

    4 program_elem: function_declaration .

    $default  reduce using rule 4 (program_elem)


State 6

    3 program_elem: class_declaration .

    $default  reduce using rule 3 (program_elem)


State 7

    5 endl: ENDL .

    $default  reduce using rule 5 (endl)


State 8

    6 endl: endl . ENDL
    8 endl_opt: endl .

    ENDL  shift, and go to state 13

    ENDL      [reduce using rule 8 (endl_opt)]
    $default  reduce using rule 8 (endl_opt)

    shift/reduce conflict on token ENDL:
        8 endl_opt: endl .
        6 endl: endl . ENDL
      Example: CLASS endl_opt ID endl . ENDL '{' '}'
      Shift derivation
        class_declaration
        `-> 156: CLASS endl_opt ID endl_opt                  extends_decl    endl_opt        implements_decl_opt endl_opt        '{' endl_opt        class_body      endl_opt        '}'
                                   `-> 8: endl               `-> 156: %empty `-> 156: %empty `-> 156: %empty     `-> 156: %empty     `-> 156: %empty `-> 156: %empty `-> 156: %empty
                                          `-> 6: endl . ENDL
      Reduce derivation
        class_declaration
        `-> 156: CLASS endl_opt ID endl_opt      extends_decl    endl_opt        implements_decl_opt endl_opt           '{' endl_opt        class_body      endl_opt        '}'
                                   `-> 8: endl . `-> 156: %empty `-> 156: %empty `-> 156: %empty     `-> 8: endl            `-> 156: %empty `-> 156: %empty `-> 156: %empty
                                                                                                            `-> 5: ENDL



State 9

  156 class_declaration: CLASS endl_opt . ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}'

    ID  shift, and go to state 14


State 10

   76 function_declaration: FUNC endl_opt . ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt stmt_list_opt endl_opt '}'
   77                     | FUNC endl_opt . ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt endl_opt '}'

    ID  shift, and go to state 15


State 11

    0 $accept: program $end .

    $default  accept


State 12

    2 program: program program_elem .

    $default  reduce using rule 2 (program)


State 13

    6 endl: endl ENDL .

    $default  reduce using rule 6 (endl)


State 14

  156 class_declaration: CLASS endl_opt ID . endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}'

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 16

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: CLASS endl_opt ID . ENDL extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                        $end
               `-> 1: class_declaration
                      `-> 156: CLASS endl_opt ID endl_opt             extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}'
                                                 `-> 8: endl
                                                        `-> 5: . ENDL
      Second example: CLASS endl_opt ID . extends_decl ENDL implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                    $end
               `-> 1: program_elem
                      `-> 3: class_declaration
                             `-> 156: CLASS endl_opt ID endl_opt        extends_decl endl_opt           implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}'
                                                        `-> 7: %empty .              `-> 8: endl
                                                                                            `-> 5: ENDL



State 15

   76 function_declaration: FUNC endl_opt ID . endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt stmt_list_opt endl_opt '}'
   77                     | FUNC endl_opt ID . endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 17


State 16

  156 class_declaration: CLASS endl_opt ID endl_opt . extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}'

    EXTENDS  shift, and go to state 18

    $default  reduce using rule 132 (extends_decl)

    extends_decl  go to state 19


State 17

   76 function_declaration: FUNC endl_opt ID endl_opt . param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt stmt_list_opt endl_opt '}'
   77                     | FUNC endl_opt ID endl_opt . param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt endl_opt '}'

    '('  shift, and go to state 20

    param_list_0_or_more  go to state 21


State 18

  133 extends_decl: EXTENDS . endl_opt ID

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 22


State 19

  156 class_declaration: CLASS endl_opt ID endl_opt extends_decl . endl_opt implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}'

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 23

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: CLASS endl_opt ID endl_opt extends_decl . ENDL implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                        $end
               `-> 1: class_declaration
                      `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt             implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}'
                                                                       `-> 8: endl
                                                                              `-> 5: . ENDL
      Second example: CLASS endl_opt ID endl_opt extends_decl . implements_decl_opt ENDL '{' endl_opt class_body endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                    $end
               `-> 1: program_elem
                      `-> 3: class_declaration
                             `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt        implements_decl_opt endl_opt           '{' endl_opt class_body endl_opt '}'
                                                                              `-> 7: %empty .                     `-> 8: endl
                                                                                                                         `-> 5: ENDL



State 20

  130 param_list_0_or_more: '(' . endl_opt param_list endl_opt ')'
  131                     | '(' . ')'

    ENDL  shift, and go to state 7
    ')'   shift, and go to state 24

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 25


State 21

   76 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more . endl_opt type_mark endl_opt '{' endl_opt stmt_list_opt endl_opt '}'
   77                     | FUNC endl_opt ID endl_opt param_list_0_or_more . endl_opt '{' endl_opt stmt_list_opt endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 26


State 22

  133 extends_decl: EXTENDS endl_opt . ID

    ID  shift, and go to state 27


State 23

  156 class_declaration: CLASS endl_opt ID endl_opt extends_decl endl_opt . implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}'

    IMPLEMENTS  shift, and go to state 28

    $default  reduce using rule 134 (implements_decl_opt)

    implements_decl_opt  go to state 29
    implements_decl      go to state 30


State 24

  131 param_list_0_or_more: '(' ')' .

    $default  reduce using rule 131 (param_list_0_or_more)


State 25

  130 param_list_0_or_more: '(' endl_opt . param_list endl_opt ')'

    ID  shift, and go to state 31

    param           go to state 32
    optional_param  go to state 33
    param_list      go to state 34


State 26

   76 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt . type_mark endl_opt '{' endl_opt stmt_list_opt endl_opt '}'
   77                     | FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt . '{' endl_opt stmt_list_opt endl_opt '}'

    ':'  shift, and go to state 35
    '{'  shift, and go to state 36

    type_mark  go to state 37


State 27

  133 extends_decl: EXTENDS endl_opt ID .

    $default  reduce using rule 133 (extends_decl)


State 28

  136 implements_decl: IMPLEMENTS . endl_opt ID

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 38


State 29

  156 class_declaration: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt . endl_opt '{' endl_opt class_body endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 39


State 30

  135 implements_decl_opt: implements_decl .
  137 implements_decl: implements_decl . endl_opt ',' endl_opt ID

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 135 (implements_decl_opt)]
    '{'       reduce using rule 135 (implements_decl_opt)
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 40

    shift/reduce conflict on token ENDL:
      135 implements_decl_opt: implements_decl .
        5 endl: . ENDL
      First example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl . ENDL ',' endl_opt ID endl_opt '{' endl_opt class_body endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                               $end
               `-> 1: class_declaration
                      `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt                                                    endl_opt '{' endl_opt class_body endl_opt '}'
                                                                                `-> 135: implements_decl
                                                                                         `-> 137: implements_decl endl_opt             ',' endl_opt ID
                                                                                                                  `-> 8: endl
                                                                                                                         `-> 5: . ENDL
      Second example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl . ENDL '{' endl_opt class_body endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                    $end
               `-> 1: program_elem
                      `-> 3: class_declaration
                             `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt        endl_opt           '{' endl_opt class_body endl_opt '}'
                                                                                       `-> 135: implements_decl . `-> 8: endl
                                                                                                                         `-> 5: ENDL



State 31

  124 param: ID . endl_opt type_mark
  125 optional_param: ID . endl_opt '?' endl_opt type_mark

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 41


State 32

  126 param_list: param .

    $default  reduce using rule 126 (param_list)


State 33

  128 param_list: optional_param .

    $default  reduce using rule 128 (param_list)


State 34

  127 param_list: param_list . endl_opt ',' endl_opt param
  129           | param_list . endl_opt ',' endl_opt optional_param
  130 param_list_0_or_more: '(' endl_opt param_list . endl_opt ')'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 42


State 35

  110 type_mark: ':' . endl_opt type

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 43


State 36

   77 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' . endl_opt stmt_list_opt endl_opt '}'

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 44

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' . ENDL stmt_list_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                    $end
               `-> 1: function_declaration
                      `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt             stmt_list_opt endl_opt '}'
                                                                                          `-> 8: endl
                                                                                                 `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' . stmt_list_opt ENDL '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt        stmt_list_opt endl_opt           '}'
                                                                                                 `-> 7: %empty .               `-> 8: endl
                                                                                                                                      `-> 5: ENDL



State 37

   76 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark . endl_opt '{' endl_opt stmt_list_opt endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 45


State 38

  136 implements_decl: IMPLEMENTS endl_opt . ID

    ID  shift, and go to state 46


State 39

  156 class_declaration: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt . '{' endl_opt class_body endl_opt '}'

    '{'  shift, and go to state 47


State 40

  137 implements_decl: implements_decl endl_opt . ',' endl_opt ID

    ','  shift, and go to state 48


State 41

  124 param: ID endl_opt . type_mark
  125 optional_param: ID endl_opt . '?' endl_opt type_mark

    '?'  shift, and go to state 49
    ':'  shift, and go to state 35

    type_mark  go to state 50


State 42

  127 param_list: param_list endl_opt . ',' endl_opt param
  129           | param_list endl_opt . ',' endl_opt optional_param
  130 param_list_0_or_more: '(' endl_opt param_list endl_opt . ')'

    ')'  shift, and go to state 51
    ','  shift, and go to state 52


State 43

  110 type_mark: ':' endl_opt . type

    UNKNOWN  shift, and go to state 53
    ANY      shift, and go to state 54
    NUMBER   shift, and go to state 55
    STRING   shift, and go to state 56
    VOID     shift, and go to state 57
    BOOLEAN  shift, and go to state 58
    ID       shift, and go to state 59

    type  go to state 60


State 44

   77 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt . stmt_list_opt endl_opt '}'

    RETURN          shift, and go to state 61
    DO              shift, and go to state 62
    IF              shift, and go to state 63
    FOR             shift, and go to state 64
    WHILE           shift, and go to state 65
    SWITCH          shift, and go to state 66
    TRY             shift, and go to state 67
    LET             shift, and go to state 68
    CONST           shift, and go to state 69
    ENUM            shift, and go to state 70
    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    ';'             shift, and go to state 76
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    $default  reduce using rule 83 (stmt_list_opt)

    expr              go to state 84
    block_statement   go to state 85
    if_stmt           go to state 86
    while_stmt        go to state 87
    do_while_stmt     go to state 88
    for_stmt          go to state 89
    switch_stmt       go to state 90
    return_statement  go to state 91
    try_catch_block   go to state 92
    stmt_list_opt     go to state 93
    stmt_list         go to state 94
    stmt              go to state 95
    empty_stmt        go to state 96
    modifier          go to state 97
    var_declaration   go to state 98
    enum_declaration  go to state 99


State 45

   76 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt . '{' endl_opt stmt_list_opt endl_opt '}'

    '{'  shift, and go to state 100


State 46

  136 implements_decl: IMPLEMENTS endl_opt ID .

    $default  reduce using rule 136 (implements_decl)


State 47

  156 class_declaration: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' . endl_opt class_body endl_opt '}'

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 101

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' . ENDL class_body endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                        $end
               `-> 1: class_declaration
                      `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt             class_body endl_opt '}'
                                                                                                                 `-> 8: endl
                                                                                                                        `-> 5: . ENDL
      Second example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' . class_body ENDL '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                    $end
               `-> 1: program_elem
                      `-> 3: class_declaration
                             `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt        class_body endl_opt           '}'
                                                                                                                        `-> 7: %empty .            `-> 8: endl
                                                                                                                                                          `-> 5: ENDL



State 48

  137 implements_decl: implements_decl endl_opt ',' . endl_opt ID

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 102


State 49

  125 optional_param: ID endl_opt '?' . endl_opt type_mark

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 103


State 50

  124 param: ID endl_opt type_mark .

    $default  reduce using rule 124 (param)


State 51

  130 param_list_0_or_more: '(' endl_opt param_list endl_opt ')' .

    $default  reduce using rule 130 (param_list_0_or_more)


State 52

  127 param_list: param_list endl_opt ',' . endl_opt param
  129           | param_list endl_opt ',' . endl_opt optional_param

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 104


State 53

  107 type: UNKNOWN .

    $default  reduce using rule 107 (type)


State 54

  106 type: ANY .

    $default  reduce using rule 106 (type)


State 55

  103 type: NUMBER .

    $default  reduce using rule 103 (type)


State 56

  104 type: STRING .

    $default  reduce using rule 104 (type)


State 57

  108 type: VOID .

    $default  reduce using rule 108 (type)


State 58

  105 type: BOOLEAN .

    $default  reduce using rule 105 (type)


State 59

  109 type: ID .

    $default  reduce using rule 109 (type)


State 60

  110 type_mark: ':' endl_opt type .

    $default  reduce using rule 110 (type_mark)


State 61

   75 return_statement: RETURN . expr stmt_sep

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 105


State 62

   62 do_while_stmt: DO . endl_opt stmt endl_opt WHILE endl_opt '(' endl_opt expr endl_opt ')'
   63              | DO . endl_opt empty_stmt endl_opt WHILE endl_opt '(' endl_opt expr endl_opt ')'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 106


State 63

   54 if_stmt: IF . endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement
   55        | IF . endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep
   56        | IF . endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt block_statement
   57        | IF . endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt expr stmt_sep
   58        | IF . endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt block_statement
   59        | IF . endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt expr stmt_sep

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 107


State 64

   64 for_stmt: FOR . endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR . endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 108


State 65

   60 while_stmt: WHILE . endl_opt '(' endl_opt expr endl_opt ')' endl_opt stmt
   61           | WHILE . endl_opt '(' endl_opt expr endl_opt ')' endl_opt empty_stmt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 109


State 66

   66 switch_stmt: SWITCH . endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 110


State 67

   78 try_catch_block: TRY . endl_opt block_statement endl_opt catch_clause

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 111


State 68

  101 modifier: LET .

    $default  reduce using rule 101 (modifier)


State 69

  102 modifier: CONST .

    $default  reduce using rule 102 (modifier)


State 70

  157 enum_declaration: ENUM . endl_opt ID endl_opt '{' endl_opt id_list endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 112


State 71

   22 expr: NUMBER_LITERAL .

    $default  reduce using rule 22 (expr)


State 72

   23 expr: STRING_LITERAL .

    $default  reduce using rule 23 (expr)


State 73

   24 expr: TRUE_LITERAL .

    $default  reduce using rule 24 (expr)


State 74

   25 expr: FALSE_LITERAL .

    $default  reduce using rule 25 (expr)


State 75

   19 expr: ID . AS endl_opt type
   26     | ID .
   28     | ID . '(' expr_list_opt ')'

    AS   shift, and go to state 113
    '('  shift, and go to state 114

    $default  reduce using rule 26 (expr)


State 76

  100 empty_stmt: ';' .

    $default  reduce using rule 100 (empty_stmt)


State 77

   21 expr: '+' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 115


State 78

   20 expr: '-' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 116


State 79

   18 expr: PREF_INCREMENT . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 117


State 80

   16 expr: PREF_DECREMENT . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 118


State 81

   46 expr: NOT . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 119


State 82

   27 expr: '(' . endl_opt expr endl_opt ')'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 120


State 83

   53 block_statement: '{' . endl_opt stmt_list_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 121


State 84

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   89 stmt: expr . stmt_sep

    ';'               shift, and go to state 122
    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    endl      go to state 147
    stmt_sep  go to state 148


State 85

   96 stmt: block_statement .

    $default  reduce using rule 96 (stmt)


State 86

   90 stmt: if_stmt .

    $default  reduce using rule 90 (stmt)


State 87

   91 stmt: while_stmt .

    $default  reduce using rule 91 (stmt)


State 88

   93 stmt: do_while_stmt . stmt_sep

    ';'   shift, and go to state 122
    ENDL  shift, and go to state 7

    endl      go to state 147
    stmt_sep  go to state 149


State 89

   92 stmt: for_stmt .

    $default  reduce using rule 92 (stmt)


State 90

   94 stmt: switch_stmt .

    $default  reduce using rule 94 (stmt)


State 91

   99 stmt: return_statement .

    $default  reduce using rule 99 (stmt)


State 92

   95 stmt: try_catch_block .

    $default  reduce using rule 95 (stmt)


State 93

   77 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt . endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 150


State 94

   84 stmt_list_opt: stmt_list . endl_opt
   87 stmt_list: stmt_list . stmt
   88          | stmt_list . empty_stmt

    RETURN          shift, and go to state 61
    DO              shift, and go to state 62
    IF              shift, and go to state 63
    FOR             shift, and go to state 64
    WHILE           shift, and go to state 65
    SWITCH          shift, and go to state 66
    TRY             shift, and go to state 67
    LET             shift, and go to state 68
    CONST           shift, and go to state 69
    ENUM            shift, and go to state 70
    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    ';'             shift, and go to state 76
    ENDL            shift, and go to state 7
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl              go to state 8
    endl_opt          go to state 151
    expr              go to state 84
    block_statement   go to state 85
    if_stmt           go to state 86
    while_stmt        go to state 87
    do_while_stmt     go to state 88
    for_stmt          go to state 89
    switch_stmt       go to state 90
    return_statement  go to state 91
    try_catch_block   go to state 92
    stmt              go to state 152
    empty_stmt        go to state 153
    modifier          go to state 97
    var_declaration   go to state 98
    enum_declaration  go to state 99

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' stmt_list . ENDL stmt_list_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                             $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' stmt_list_opt                          stmt_list_opt endl_opt '}'
                                                                                                 `-> 84: stmt_list endl_opt
                                                                                                                   `-> 8: endl
                                                                                                                          `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list . ENDL '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                             $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                     endl_opt           '}'
                                                                                                          `-> 84: stmt_list endl_opt        `-> 8: endl
                                                                                                                            `-> 7: %empty .        `-> 5: ENDL



State 95

   85 stmt_list: stmt .

    $default  reduce using rule 85 (stmt_list)


State 96

   86 stmt_list: empty_stmt .

    $default  reduce using rule 86 (stmt_list)


State 97

  118 var_declaration: modifier . endl_opt var_list
  119                | modifier . ID endl_opt type_mark endl_opt dimensions_list
  120                | modifier . ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']'

    ID    shift, and go to state 154
    ENDL  shift, and go to state 7

    ID  [reduce using rule 7 (endl_opt)]

    endl      go to state 8
    endl_opt  go to state 155

    shift/reduce conflict on token ID:
        7 endl_opt: %empty .
      119 var_declaration: modifier . ID endl_opt type_mark endl_opt dimensions_list
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier . ID endl_opt type_mark endl_opt dimensions_list stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                       $end
               `-> 1: function_declaration
                      `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                endl_opt '}'
                                                                                                   `-> 84: stmt_list                                                                                   endl_opt
                                                                                                           `-> 85: stmt
                                                                                                                   `-> 97: var_declaration                                                    stmt_sep
                                                                                                                           `-> 119: modifier . ID endl_opt type_mark endl_opt dimensions_list
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier . ID endl_opt type_mark_opt var_init_opt stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                      $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                        endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                           endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                                                                            stmt_sep
                                                                                                                                  `-> 118: modifier endl_opt        var_list
                                                                                                                                                    `-> 7: %empty . `-> 116: variable                           var_init_opt
                                                                                                                                                                             `-> 113: ID endl_opt type_mark_opt

    shift/reduce conflict on token ID:
        7 endl_opt: %empty .
      120 var_declaration: modifier . ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']'
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier . ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']' stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                            $end
               `-> 1: function_declaration
                      `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                     endl_opt '}'
                                                                                                   `-> 84: stmt_list                                                                                                                                        endl_opt
                                                                                                           `-> 85: stmt
                                                                                                                   `-> 97: var_declaration                                                                                                         stmt_sep
                                                                                                                           `-> 120: modifier . ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']'
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier . ID endl_opt type_mark_opt var_init_opt stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                      $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                        endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                           endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                                                                            stmt_sep
                                                                                                                                  `-> 118: modifier endl_opt        var_list
                                                                                                                                                    `-> 7: %empty . `-> 116: variable                           var_init_opt
                                                                                                                                                                             `-> 113: ID endl_opt type_mark_opt



State 98

   97 stmt: var_declaration . stmt_sep

    ';'   shift, and go to state 122
    ENDL  shift, and go to state 7

    endl      go to state 147
    stmt_sep  go to state 156


State 99

   98 stmt: enum_declaration .

    $default  reduce using rule 98 (stmt)


State 100

   76 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' . endl_opt stmt_list_opt endl_opt '}'

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 157

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      Example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' . ENDL '}'
      Shift derivation
        function_declaration
        `-> 76: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt             stmt_list_opt  endl_opt       '}'
                                                                                               `-> 8: endl          `-> 76: %empty `-> 76: %empty
                                                                                                      `-> 5: . ENDL
      Reduce derivation
        function_declaration
        `-> 76: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt        stmt_list_opt  endl_opt           '}'
                                                                                               `-> 7: %empty . `-> 76: %empty `-> 8: endl
                                                                                                                                     `-> 5: ENDL



State 101

  156 class_declaration: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt . class_body endl_opt '}'

    CLASS      shift, and go to state 1
    STATIC     shift, and go to state 158
    PUBLIC     shift, and go to state 159
    PROTECTED  shift, and go to state 160
    PRIVATE    shift, and go to state 161
    READONLY   shift, and go to state 162
    FUNC       shift, and go to state 2

    $default  reduce using rule 154 (class_body)

    function_declaration          go to state 163
    property_modifier             go to state 164
    visibility                    go to state 165
    class_member                  go to state 166
    class_visibility_member       go to state 167
    class_visibility_member_list  go to state 168
    class_body                    go to state 169
    class_declaration             go to state 170


State 102

  137 implements_decl: implements_decl endl_opt ',' endl_opt . ID

    ID  shift, and go to state 171


State 103

  125 optional_param: ID endl_opt '?' endl_opt . type_mark

    ':'  shift, and go to state 35

    type_mark  go to state 172


State 104

  127 param_list: param_list endl_opt ',' endl_opt . param
  129           | param_list endl_opt ',' endl_opt . optional_param

    ID  shift, and go to state 31

    param           go to state 173
    optional_param  go to state 174


State 105

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   75 return_statement: RETURN expr . stmt_sep

    ';'               shift, and go to state 122
    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    endl      go to state 147
    stmt_sep  go to state 175


State 106

   62 do_while_stmt: DO endl_opt . stmt endl_opt WHILE endl_opt '(' endl_opt expr endl_opt ')'
   63              | DO endl_opt . empty_stmt endl_opt WHILE endl_opt '(' endl_opt expr endl_opt ')'

    RETURN          shift, and go to state 61
    DO              shift, and go to state 62
    IF              shift, and go to state 63
    FOR             shift, and go to state 64
    WHILE           shift, and go to state 65
    SWITCH          shift, and go to state 66
    TRY             shift, and go to state 67
    LET             shift, and go to state 68
    CONST           shift, and go to state 69
    ENUM            shift, and go to state 70
    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    ';'             shift, and go to state 76
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    expr              go to state 84
    block_statement   go to state 85
    if_stmt           go to state 86
    while_stmt        go to state 87
    do_while_stmt     go to state 88
    for_stmt          go to state 89
    switch_stmt       go to state 90
    return_statement  go to state 91
    try_catch_block   go to state 92
    stmt              go to state 176
    empty_stmt        go to state 177
    modifier          go to state 97
    var_declaration   go to state 98
    enum_declaration  go to state 99


State 107

   54 if_stmt: IF endl_opt . '(' endl_opt expr endl_opt ')' endl_opt block_statement
   55        | IF endl_opt . '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep
   56        | IF endl_opt . '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt block_statement
   57        | IF endl_opt . '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt expr stmt_sep
   58        | IF endl_opt . '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt block_statement
   59        | IF endl_opt . '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt expr stmt_sep

    '('  shift, and go to state 178


State 108

   64 for_stmt: FOR endl_opt . '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt . '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

    '('  shift, and go to state 179


State 109

   60 while_stmt: WHILE endl_opt . '(' endl_opt expr endl_opt ')' endl_opt stmt
   61           | WHILE endl_opt . '(' endl_opt expr endl_opt ')' endl_opt empty_stmt

    '('  shift, and go to state 180


State 110

   66 switch_stmt: SWITCH endl_opt . '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list endl_opt '}'

    '('  shift, and go to state 181


State 111

   78 try_catch_block: TRY endl_opt . block_statement endl_opt catch_clause

    '{'  shift, and go to state 83

    block_statement  go to state 182


State 112

  157 enum_declaration: ENUM endl_opt . ID endl_opt '{' endl_opt id_list endl_opt '}'

    ID  shift, and go to state 183


State 113

   19 expr: ID AS . endl_opt type

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 184


State 114

   28 expr: ID '(' . expr_list_opt ')'

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    $default  reduce using rule 13 (expr_list_opt)

    expr_list      go to state 185
    expr_list_opt  go to state 186
    expr           go to state 187


State 115

   21 expr: '+' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 188


State 116

   20 expr: '-' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 189


State 117

   18 expr: PREF_INCREMENT endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 190


State 118

   16 expr: PREF_DECREMENT endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 191


State 119

   46 expr: NOT endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 192


State 120

   27 expr: '(' endl_opt . expr endl_opt ')'

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 193


State 121

   53 block_statement: '{' endl_opt . stmt_list_opt '}'

    RETURN          shift, and go to state 61
    DO              shift, and go to state 62
    IF              shift, and go to state 63
    FOR             shift, and go to state 64
    WHILE           shift, and go to state 65
    SWITCH          shift, and go to state 66
    TRY             shift, and go to state 67
    LET             shift, and go to state 68
    CONST           shift, and go to state 69
    ENUM            shift, and go to state 70
    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    ';'             shift, and go to state 76
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    $default  reduce using rule 83 (stmt_list_opt)

    expr              go to state 84
    block_statement   go to state 85
    if_stmt           go to state 86
    while_stmt        go to state 87
    do_while_stmt     go to state 88
    for_stmt          go to state 89
    switch_stmt       go to state 90
    return_statement  go to state 91
    try_catch_block   go to state 92
    stmt_list_opt     go to state 194
    stmt_list         go to state 94
    stmt              go to state 95
    empty_stmt        go to state 96
    modifier          go to state 97
    var_declaration   go to state 98
    enum_declaration  go to state 99


State 122

    9 stmt_sep: ';' .

    $default  reduce using rule 9 (stmt_sep)


State 123

   40 expr: expr '=' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 195


State 124

   41 expr: expr PLUS_ASSIGN . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 196


State 125

   42 expr: expr MINUS_ASSIGN . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 197


State 126

   43 expr: expr MUL_ASSIGN . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 198


State 127

   44 expr: expr DIV_ASSIGN . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 199


State 128

   45 expr: expr MOD_ASSIGN . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 200


State 129

   50 expr: expr '[' . endl_opt expr endl_opt ']'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 201


State 130

   49 expr: expr '?' . endl_opt expr endl_opt ':' endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 202


State 131

   48 expr: expr OR . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 203


State 132

   47 expr: expr AND . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 204


State 133

   38 expr: expr EQUALS . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 205


State 134

   39 expr: expr NOT_EQUALS . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 206


State 135

   34 expr: expr '<' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 207


State 136

   35 expr: expr '>' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 208


State 137

   36 expr: expr LESS_OR_EQUAL . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 209


State 138

   37 expr: expr GREATER_OR_EQUAL . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 210


State 139

   29 expr: expr '+' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 211


State 140

   30 expr: expr '-' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 212


State 141

   31 expr: expr '*' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 213


State 142

   32 expr: expr '/' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 214


State 143

   33 expr: expr '%' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 215


State 144

   17 expr: expr POST_INCREMENT .

    $default  reduce using rule 17 (expr)


State 145

   15 expr: expr POST_DECREMENT .

    $default  reduce using rule 15 (expr)


State 146

   51 expr: expr '.' . endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr '.' . endl_opt ID

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 216


State 147

    6 endl: endl . ENDL
   10 stmt_sep: endl .

    ENDL  shift, and go to state 13

    ENDL      [reduce using rule 10 (stmt_sep)]
    $default  reduce using rule 10 (stmt_sep)

    shift/reduce conflict on token ENDL:
       10 stmt_sep: endl .
        6 endl: endl . ENDL
      Example: expr endl . ENDL
      Shift derivation
        stmt_list_opt
        `-> 84: stmt_list                                       endl_opt
                `-> 85: stmt                                    `-> 84: %empty
                        `-> 89: expr stmt_sep
                                     `-> 10: endl
                                             `-> 6: endl . ENDL
      Reduce derivation
        stmt_list_opt
        `-> 84: stmt_list                           endl_opt
                `-> 85: stmt                        `-> 8: endl
                        `-> 89: expr stmt_sep              `-> 5: ENDL
                                     `-> 10: endl .



State 148

   89 stmt: expr stmt_sep .

    $default  reduce using rule 89 (stmt)


State 149

   93 stmt: do_while_stmt stmt_sep .

    $default  reduce using rule 93 (stmt)


State 150

   77 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt endl_opt . '}'

    '}'  shift, and go to state 217


State 151

   84 stmt_list_opt: stmt_list endl_opt .

    $default  reduce using rule 84 (stmt_list_opt)


State 152

   87 stmt_list: stmt_list stmt .

    $default  reduce using rule 87 (stmt_list)


State 153

   88 stmt_list: stmt_list empty_stmt .

    $default  reduce using rule 88 (stmt_list)


State 154

  119 var_declaration: modifier ID . endl_opt type_mark endl_opt dimensions_list
  120                | modifier ID . endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 218


State 155

  118 var_declaration: modifier endl_opt . var_list

    ID  shift, and go to state 219

    variable  go to state 220
    var_list  go to state 221


State 156

   97 stmt: var_declaration stmt_sep .

    $default  reduce using rule 97 (stmt)


State 157

   76 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt . stmt_list_opt endl_opt '}'

    RETURN          shift, and go to state 61
    DO              shift, and go to state 62
    IF              shift, and go to state 63
    FOR             shift, and go to state 64
    WHILE           shift, and go to state 65
    SWITCH          shift, and go to state 66
    TRY             shift, and go to state 67
    LET             shift, and go to state 68
    CONST           shift, and go to state 69
    ENUM            shift, and go to state 70
    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    ';'             shift, and go to state 76
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    $default  reduce using rule 83 (stmt_list_opt)

    expr              go to state 84
    block_statement   go to state 85
    if_stmt           go to state 86
    while_stmt        go to state 87
    do_while_stmt     go to state 88
    for_stmt          go to state 89
    switch_stmt       go to state 90
    return_statement  go to state 91
    try_catch_block   go to state 92
    stmt_list_opt     go to state 222
    stmt_list         go to state 94
    stmt              go to state 95
    empty_stmt        go to state 96
    modifier          go to state 97
    var_declaration   go to state 98
    enum_declaration  go to state 99


State 158

  142 property_modifier: STATIC .

    $default  reduce using rule 142 (property_modifier)


State 159

  146 visibility: PUBLIC .

    $default  reduce using rule 146 (visibility)


State 160

  145 visibility: PROTECTED .

    $default  reduce using rule 145 (visibility)


State 161

  144 visibility: PRIVATE .

    $default  reduce using rule 144 (visibility)


State 162

  140 property_modifier: READONLY .

    $default  reduce using rule 140 (property_modifier)


State 163

  148 class_member: function_declaration .

    $default  reduce using rule 148 (class_member)


State 164

  147 class_member: property_modifier . expr endl_opt stmt_sep

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 223


State 165

  138 property_modifier: visibility .
  139                  | visibility . READONLY
  141                  | visibility . STATIC
  143                  | visibility . STATIC READONLY
  151 class_visibility_member: visibility . endl_opt class_member

    STATIC    shift, and go to state 224
    READONLY  shift, and go to state 225
    ENDL      shift, and go to state 7

    CLASS      reduce using rule 7 (endl_opt)
    STATIC     [reduce using rule 7 (endl_opt)]
    PUBLIC     reduce using rule 7 (endl_opt)
    PROTECTED  reduce using rule 7 (endl_opt)
    PRIVATE    reduce using rule 7 (endl_opt)
    READONLY   [reduce using rule 7 (endl_opt)]
    FUNC       reduce using rule 7 (endl_opt)
    $default   reduce using rule 138 (property_modifier)

    endl      go to state 8
    endl_opt  go to state 226

    shift/reduce conflict on token READONLY:
        7 endl_opt: %empty .
      139 property_modifier: visibility . READONLY
      Example: visibility . READONLY expr stmt_sep
      Shift derivation
        class_visibility_member
        `-> 150: class_member
                 `-> 147: property_modifier              expr endl_opt        stmt_sep
                          `-> 139: visibility . READONLY      `-> 147: %empty
      Reduce derivation
        class_visibility_member
        `-> 151: visibility endl_opt        class_member
                            `-> 7: %empty . `-> 147: property_modifier expr endl_opt        stmt_sep
                                                     `-> 140: READONLY      `-> 147: %empty

    shift/reduce conflict on token STATIC:
        7 endl_opt: %empty .
      141 property_modifier: visibility . STATIC
      First example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt visibility . STATIC expr endl_opt stmt_sep endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                         $end
               `-> 1: class_declaration
                      `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body                                                                              endl_opt '}'
                                                                                                                          `-> 155: class_visibility_member_list
                                                                                                                                   `-> 152: class_visibility_member
                                                                                                                                            `-> 150: class_member
                                                                                                                                                     `-> 147: property_modifier            expr endl_opt stmt_sep
                                                                                                                                                              `-> 141: visibility . STATIC
      Second example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt visibility . STATIC expr endl_opt stmt_sep endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                $end
               `-> 1: program_elem
                      `-> 3: class_declaration
                             `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body                                                                                              endl_opt '}'
                                                                                                                                 `-> 155: class_visibility_member_list
                                                                                                                                          `-> 152: class_visibility_member
                                                                                                                                                   `-> 151: visibility endl_opt        class_member
                                                                                                                                                                       `-> 7: %empty . `-> 147: property_modifier expr endl_opt stmt_sep
                                                                                                                                                                                                `-> 142: STATIC

    shift/reduce conflict on token STATIC:
        7 endl_opt: %empty .
      143 property_modifier: visibility . STATIC READONLY
      First example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt visibility . STATIC READONLY expr endl_opt stmt_sep endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                  $end
               `-> 1: class_declaration
                      `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body                                                                                       endl_opt '}'
                                                                                                                          `-> 155: class_visibility_member_list
                                                                                                                                   `-> 152: class_visibility_member
                                                                                                                                            `-> 150: class_member
                                                                                                                                                     `-> 147: property_modifier                     expr endl_opt stmt_sep
                                                                                                                                                              `-> 143: visibility . STATIC READONLY
      Second example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt visibility . STATIC expr endl_opt stmt_sep endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                $end
               `-> 1: program_elem
                      `-> 3: class_declaration
                             `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body                                                                                              endl_opt '}'
                                                                                                                                 `-> 155: class_visibility_member_list
                                                                                                                                          `-> 152: class_visibility_member
                                                                                                                                                   `-> 151: visibility endl_opt        class_member
                                                                                                                                                                       `-> 7: %empty . `-> 147: property_modifier expr endl_opt stmt_sep
                                                                                                                                                                                                `-> 142: STATIC



State 166

  150 class_visibility_member: class_member .

    $default  reduce using rule 150 (class_visibility_member)


State 167

  152 class_visibility_member_list: class_visibility_member .

    $default  reduce using rule 152 (class_visibility_member_list)


State 168

  153 class_visibility_member_list: class_visibility_member_list . endl_opt class_visibility_member
  155 class_body: class_visibility_member_list .

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 155 (class_body)]
    '}'       reduce using rule 155 (class_body)
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 227

    shift/reduce conflict on token ENDL:
      155 class_body: class_visibility_member_list .
        5 endl: . ENDL
      First example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_visibility_member_list . ENDL class_visibility_member endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                             $end
               `-> 1: class_declaration
                      `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body                                                                                  endl_opt '}'
                                                                                                                          `-> 155: class_visibility_member_list
                                                                                                                                   `-> 153: class_visibility_member_list endl_opt             class_visibility_member
                                                                                                                                                                         `-> 8: endl
                                                                                                                                                                                `-> 5: . ENDL
      Second example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_visibility_member_list . ENDL '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                          $end
               `-> 1: program_elem
                      `-> 3: class_declaration
                             `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body                              endl_opt           '}'
                                                                                                                                 `-> 155: class_visibility_member_list . `-> 8: endl
                                                                                                                                                                                `-> 5: ENDL



State 169

  156 class_declaration: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body . endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 228


State 170

  149 class_member: class_declaration .

    $default  reduce using rule 149 (class_member)


State 171

  137 implements_decl: implements_decl endl_opt ',' endl_opt ID .

    $default  reduce using rule 137 (implements_decl)


State 172

  125 optional_param: ID endl_opt '?' endl_opt type_mark .

    $default  reduce using rule 125 (optional_param)


State 173

  127 param_list: param_list endl_opt ',' endl_opt param .

    $default  reduce using rule 127 (param_list)


State 174

  129 param_list: param_list endl_opt ',' endl_opt optional_param .

    $default  reduce using rule 129 (param_list)


State 175

   75 return_statement: RETURN expr stmt_sep .

    $default  reduce using rule 75 (return_statement)


State 176

   62 do_while_stmt: DO endl_opt stmt . endl_opt WHILE endl_opt '(' endl_opt expr endl_opt ')'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 229


State 177

   63 do_while_stmt: DO endl_opt empty_stmt . endl_opt WHILE endl_opt '(' endl_opt expr endl_opt ')'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 230


State 178

   54 if_stmt: IF endl_opt '(' . endl_opt expr endl_opt ')' endl_opt block_statement
   55        | IF endl_opt '(' . endl_opt expr endl_opt ')' endl_opt expr stmt_sep
   56        | IF endl_opt '(' . endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt block_statement
   57        | IF endl_opt '(' . endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt expr stmt_sep
   58        | IF endl_opt '(' . endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt block_statement
   59        | IF endl_opt '(' . endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt expr stmt_sep

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 231


State 179

   64 for_stmt: FOR endl_opt '(' . endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' . endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 232


State 180

   60 while_stmt: WHILE endl_opt '(' . endl_opt expr endl_opt ')' endl_opt stmt
   61           | WHILE endl_opt '(' . endl_opt expr endl_opt ')' endl_opt empty_stmt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 233


State 181

   66 switch_stmt: SWITCH endl_opt '(' . endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 234


State 182

   78 try_catch_block: TRY endl_opt block_statement . endl_opt catch_clause

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 235


State 183

  157 enum_declaration: ENUM endl_opt ID . endl_opt '{' endl_opt id_list endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 236


State 184

   19 expr: ID AS endl_opt . type

    UNKNOWN  shift, and go to state 53
    ANY      shift, and go to state 54
    NUMBER   shift, and go to state 55
    STRING   shift, and go to state 56
    VOID     shift, and go to state 57
    BOOLEAN  shift, and go to state 58
    ID       shift, and go to state 59

    type  go to state 237


State 185

   12 expr_list: expr_list . endl_opt ',' endl_opt expr
   14 expr_list_opt: expr_list .

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 14 (expr_list_opt)]
    ','       reduce using rule 7 (endl_opt)
    $default  reduce using rule 14 (expr_list_opt)

    endl      go to state 8
    endl_opt  go to state 238

    shift/reduce conflict on token ENDL:
       14 expr_list_opt: expr_list .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '.' endl_opt ID endl_opt '(' endl_opt expr_list . ENDL ',' endl_opt expr endl_opt ')' endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                           $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                             endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                endl_opt
                                                                                                                  `-> 85: expr
                                                                                                                          `-> 51: expr '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt                                                    endl_opt ')'
                                                                                                                                                                             `-> 14: expr_list
                                                                                                                                                                                     `-> 12: expr_list endl_opt             ',' endl_opt expr
                                                                                                                                                                                                       `-> 8: endl
                                                                                                                                                                                                              `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '.' endl_opt ID endl_opt '(' endl_opt expr_list . ENDL ')' stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                         $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                           endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                              endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                          stmt_sep
                                                                                                                                  `-> 51: expr '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt       endl_opt           ')'
                                                                                                                                                                                     `-> 14: expr_list . `-> 8: endl
                                                                                                                                                                                                                `-> 5: ENDL



State 186

   28 expr: ID '(' expr_list_opt . ')'

    ')'  shift, and go to state 239


State 187

   11 expr_list: expr .
   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 11 (expr_list)


State 188

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   21     | '+' endl_opt expr .
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '.'  shift, and go to state 146

    $default  reduce using rule 21 (expr)


State 189

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   20     | '-' endl_opt expr .
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '.'  shift, and go to state 146

    $default  reduce using rule 20 (expr)


State 190

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   18     | PREF_INCREMENT endl_opt expr .
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 18 (expr)


State 191

   15 expr: expr . POST_DECREMENT
   16     | PREF_DECREMENT endl_opt expr .
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 16 (expr)


State 192

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   46     | NOT endl_opt expr .
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '.'  shift, and go to state 146

    $default  reduce using rule 46 (expr)


State 193

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   27     | '(' endl_opt expr . endl_opt ')'
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 240


State 194

   53 block_statement: '{' endl_opt stmt_list_opt . '}'

    '}'  shift, and go to state 241


State 195

   40 expr: expr '=' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 242


State 196

   41 expr: expr PLUS_ASSIGN endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 243


State 197

   42 expr: expr MINUS_ASSIGN endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 244


State 198

   43 expr: expr MUL_ASSIGN endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 245


State 199

   44 expr: expr DIV_ASSIGN endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 246


State 200

   45 expr: expr MOD_ASSIGN endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 247


State 201

   50 expr: expr '[' endl_opt . expr endl_opt ']'

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 248


State 202

   49 expr: expr '?' endl_opt . expr endl_opt ':' endl_opt expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 249


State 203

   48 expr: expr OR endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 250


State 204

   47 expr: expr AND endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 251


State 205

   38 expr: expr EQUALS endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 252


State 206

   39 expr: expr NOT_EQUALS endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 253


State 207

   34 expr: expr '<' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 254


State 208

   35 expr: expr '>' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 255


State 209

   36 expr: expr LESS_OR_EQUAL endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 256


State 210

   37 expr: expr GREATER_OR_EQUAL endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 257


State 211

   29 expr: expr '+' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 258


State 212

   30 expr: expr '-' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 259


State 213

   31 expr: expr '*' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 260


State 214

   32 expr: expr '/' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 261


State 215

   33 expr: expr '%' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 262


State 216

   51 expr: expr '.' endl_opt . ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr '.' endl_opt . ID

    ID  shift, and go to state 263


State 217

   77 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt endl_opt '}' .

    $default  reduce using rule 77 (function_declaration)


State 218

  119 var_declaration: modifier ID endl_opt . type_mark endl_opt dimensions_list
  120                | modifier ID endl_opt . type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']'

    ':'  shift, and go to state 35

    type_mark  go to state 264


State 219

  113 variable: ID . endl_opt type_mark_opt

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 265

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier endl_opt ID . ENDL type_mark_opt stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                     $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                       endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                          endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                                                           stmt_sep
                                                                                                                                  `-> 118: modifier endl_opt variable
                                                                                                                                                             `-> 113: ID endl_opt             type_mark_opt
                                                                                                                                                                         `-> 8: endl
                                                                                                                                                                                `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier endl_opt ID . type_mark_opt ENDL '=' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                       $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                         endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                            endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                                                                                                             stmt_sep
                                                                                                                                  `-> 118: modifier endl_opt var_list
                                                                                                                                                             `-> 116: variable                                  var_init_opt
                                                                                                                                                                      `-> 113: ID endl_opt        type_mark_opt `-> 115: endl_opt           '=' endl_opt expr
                                                                                                                                                                                  `-> 7: %empty .                        `-> 8: endl
                                                                                                                                                                                                                                `-> 5: ENDL



State 220

  116 var_list: variable . var_init_opt

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 114 (var_init_opt)]
    '='       reduce using rule 7 (endl_opt)
    $default  reduce using rule 114 (var_init_opt)

    endl          go to state 8
    endl_opt      go to state 266
    var_init_opt  go to state 267

    shift/reduce conflict on token ENDL:
      114 var_init_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier variable . ENDL '=' endl_opt expr var_list stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                          endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                             endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                                                                              stmt_sep
                                                                                                                                  `-> 118: modifier var_list                                                          var_list
                                                                                                                                                    `-> 116: variable var_init_opt
                                                                                                                                                                      `-> 115: endl_opt             '=' endl_opt expr
                                                                                                                                                                               `-> 8: endl
                                                                                                                                                                                      `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier endl_opt variable . ENDL endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                     $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                       endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                          endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                                                stmt_sep
                                                                                                                                  `-> 118: modifier endl_opt var_list                            `-> 10: endl
                                                                                                                                                             `-> 116: variable var_init_opt              `-> 5: ENDL
                                                                                                                                                                               `-> 114: %empty .



State 221

  117 var_list: var_list . endl_opt ',' endl_opt variable var_init_opt
  118 var_declaration: modifier endl_opt var_list .

    ENDL  shift, and go to state 7

    ';'       reduce using rule 118 (var_declaration)
    ENDL      [reduce using rule 118 (var_declaration)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 268

    shift/reduce conflict on token ENDL:
      118 var_declaration: modifier endl_opt var_list .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier endl_opt var_list . ENDL ',' endl_opt variable var_init_opt endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                               $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                 endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                    endl_opt
                                                                                                                  `-> 85: var_declaration
                                                                                                                          `-> 118: modifier endl_opt var_list
                                                                                                                                                     `-> 117: var_list endl_opt             ',' endl_opt variable var_init_opt
                                                                                                                                                                       `-> 8: endl
                                                                                                                                                                              `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier endl_opt var_list . ENDL endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                            $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                              endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                 endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                       stmt_sep
                                                                                                                                  `-> 118: modifier endl_opt var_list . `-> 10: endl
                                                                                                                                                                                `-> 5: ENDL



State 222

   76 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt stmt_list_opt . endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 269


State 223

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
  147 class_member: property_modifier expr . endl_opt stmt_sep

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 270

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt property_modifier expr . ENDL stmt_sep endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 3: class_declaration
                             `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body                                                                      endl_opt '}'
                                                                                                                                 `-> 155: class_visibility_member_list
                                                                                                                                          `-> 152: class_member
                                                                                                                                                   `-> 147: property_modifier expr endl_opt             stmt_sep
                                                                                                                                                                                   `-> 8: endl
                                                                                                                                                                                          `-> 5: . ENDL
      Second example: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt property_modifier expr . ENDL endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                       $end
               `-> 1: program_elem
                      `-> 3: class_declaration
                             `-> 156: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body                                                                                     endl_opt '}'
                                                                                                                                 `-> 155: class_visibility_member_list
                                                                                                                                          `-> 152: class_visibility_member
                                                                                                                                                   `-> 150: class_member
                                                                                                                                                            `-> 147: property_modifier expr endl_opt        stmt_sep
                                                                                                                                                                                            `-> 7: %empty . `-> 10: endl
                                                                                                                                                                                                                    `-> 5: ENDL



State 224

  141 property_modifier: visibility STATIC .
  143                  | visibility STATIC . READONLY

    READONLY  shift, and go to state 271

    $default  reduce using rule 141 (property_modifier)


State 225

  139 property_modifier: visibility READONLY .

    $default  reduce using rule 139 (property_modifier)


State 226

  151 class_visibility_member: visibility endl_opt . class_member

    CLASS      shift, and go to state 1
    STATIC     shift, and go to state 158
    PUBLIC     shift, and go to state 159
    PROTECTED  shift, and go to state 160
    PRIVATE    shift, and go to state 161
    READONLY   shift, and go to state 162
    FUNC       shift, and go to state 2

    function_declaration  go to state 163
    property_modifier     go to state 164
    visibility            go to state 272
    class_member          go to state 273
    class_declaration     go to state 170


State 227

  153 class_visibility_member_list: class_visibility_member_list endl_opt . class_visibility_member

    CLASS      shift, and go to state 1
    STATIC     shift, and go to state 158
    PUBLIC     shift, and go to state 159
    PROTECTED  shift, and go to state 160
    PRIVATE    shift, and go to state 161
    READONLY   shift, and go to state 162
    FUNC       shift, and go to state 2

    function_declaration     go to state 163
    property_modifier        go to state 164
    visibility               go to state 165
    class_member             go to state 166
    class_visibility_member  go to state 274
    class_declaration        go to state 170


State 228

  156 class_declaration: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body endl_opt . '}'

    '}'  shift, and go to state 275


State 229

   62 do_while_stmt: DO endl_opt stmt endl_opt . WHILE endl_opt '(' endl_opt expr endl_opt ')'

    WHILE  shift, and go to state 276


State 230

   63 do_while_stmt: DO endl_opt empty_stmt endl_opt . WHILE endl_opt '(' endl_opt expr endl_opt ')'

    WHILE  shift, and go to state 277


State 231

   54 if_stmt: IF endl_opt '(' endl_opt . expr endl_opt ')' endl_opt block_statement
   55        | IF endl_opt '(' endl_opt . expr endl_opt ')' endl_opt expr stmt_sep
   56        | IF endl_opt '(' endl_opt . expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt block_statement
   57        | IF endl_opt '(' endl_opt . expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt expr stmt_sep
   58        | IF endl_opt '(' endl_opt . expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt block_statement
   59        | IF endl_opt '(' endl_opt . expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt expr stmt_sep

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 278


State 232

   64 for_stmt: FOR endl_opt '(' endl_opt . expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt . expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 279


State 233

   60 while_stmt: WHILE endl_opt '(' endl_opt . expr endl_opt ')' endl_opt stmt
   61           | WHILE endl_opt '(' endl_opt . expr endl_opt ')' endl_opt empty_stmt

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 280


State 234

   66 switch_stmt: SWITCH endl_opt '(' endl_opt . expr endl_opt ')' endl_opt '{' endl_opt case_list endl_opt '}'

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 281


State 235

   78 try_catch_block: TRY endl_opt block_statement endl_opt . catch_clause

    CATCH  shift, and go to state 282

    catch_clause  go to state 283


State 236

  157 enum_declaration: ENUM endl_opt ID endl_opt . '{' endl_opt id_list endl_opt '}'

    '{'  shift, and go to state 284


State 237

   19 expr: ID AS endl_opt type .

    $default  reduce using rule 19 (expr)


State 238

   12 expr_list: expr_list endl_opt . ',' endl_opt expr

    ','  shift, and go to state 285


State 239

   28 expr: ID '(' expr_list_opt ')' .

    $default  reduce using rule 28 (expr)


State 240

   27 expr: '(' endl_opt expr endl_opt . ')'

    ')'  shift, and go to state 286


State 241

   53 block_statement: '{' endl_opt stmt_list_opt '}' .

    $default  reduce using rule 53 (block_statement)


State 242

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   40     | expr '=' endl_opt expr .
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 40 (expr)


State 243

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   41     | expr PLUS_ASSIGN endl_opt expr .
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 41 (expr)


State 244

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   42     | expr MINUS_ASSIGN endl_opt expr .
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 42 (expr)


State 245

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   43     | expr MUL_ASSIGN endl_opt expr .
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 43 (expr)


State 246

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   44     | expr DIV_ASSIGN endl_opt expr .
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 44 (expr)


State 247

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   45     | expr MOD_ASSIGN endl_opt expr .
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 45 (expr)


State 248

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   50     | expr '[' endl_opt expr . endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 287


State 249

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   49     | expr '?' endl_opt expr . endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 288


State 250

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   48     | expr OR endl_opt expr .
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 48 (expr)


State 251

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   47     | expr AND endl_opt expr .
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 47 (expr)


State 252

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   38     | expr EQUALS endl_opt expr .
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '+'             shift, and go to state 139
    '-'             shift, and go to state 140
    '*'             shift, and go to state 141
    '/'             shift, and go to state 142
    '%'             shift, and go to state 143
    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 38 (expr)


State 253

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   39     | expr NOT_EQUALS endl_opt expr .
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '+'             shift, and go to state 139
    '-'             shift, and go to state 140
    '*'             shift, and go to state 141
    '/'             shift, and go to state 142
    '%'             shift, and go to state 143
    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 39 (expr)


State 254

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   34     | expr '<' endl_opt expr .
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '+'             shift, and go to state 139
    '-'             shift, and go to state 140
    '*'             shift, and go to state 141
    '/'             shift, and go to state 142
    '%'             shift, and go to state 143
    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 34 (expr)


State 255

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   35     | expr '>' endl_opt expr .
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '+'             shift, and go to state 139
    '-'             shift, and go to state 140
    '*'             shift, and go to state 141
    '/'             shift, and go to state 142
    '%'             shift, and go to state 143
    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 35 (expr)


State 256

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   36     | expr LESS_OR_EQUAL endl_opt expr .
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '+'             shift, and go to state 139
    '-'             shift, and go to state 140
    '*'             shift, and go to state 141
    '/'             shift, and go to state 142
    '%'             shift, and go to state 143
    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 36 (expr)


State 257

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   37     | expr GREATER_OR_EQUAL endl_opt expr .
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '+'             shift, and go to state 139
    '-'             shift, and go to state 140
    '*'             shift, and go to state 141
    '/'             shift, and go to state 142
    '%'             shift, and go to state 143
    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 37 (expr)


State 258

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   29     | expr '+' endl_opt expr .
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '*'             shift, and go to state 141
    '/'             shift, and go to state 142
    '%'             shift, and go to state 143
    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 29 (expr)


State 259

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   30     | expr '-' endl_opt expr .
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '*'             shift, and go to state 141
    '/'             shift, and go to state 142
    '%'             shift, and go to state 143
    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 30 (expr)


State 260

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   31     | expr '*' endl_opt expr .
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 31 (expr)


State 261

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   32     | expr '/' endl_opt expr .
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 32 (expr)


State 262

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   33     | expr '%' endl_opt expr .
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    POST_INCREMENT  shift, and go to state 144
    POST_DECREMENT  shift, and go to state 145
    '.'             shift, and go to state 146

    $default  reduce using rule 33 (expr)


State 263

   51 expr: expr '.' endl_opt ID . endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr '.' endl_opt ID .

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 52 (expr)]
    '('       reduce using rule 7 (endl_opt)
    $default  reduce using rule 52 (expr)

    endl      go to state 8
    endl_opt  go to state 289

    shift/reduce conflict on token ENDL:
       52 expr: expr '.' endl_opt ID .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '.' endl_opt ID . ENDL '(' endl_opt expr_list_opt endl_opt ')' stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                              $end
               `-> 1: function_declaration
                      `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                       endl_opt '}'
                                                                                                   `-> 84: stmt_list                                                                                                          endl_opt
                                                                                                           `-> 85: stmt
                                                                                                                   `-> 89: expr                                                                                      stmt_sep
                                                                                                                           `-> 51: expr '.' endl_opt ID endl_opt             '(' endl_opt expr_list_opt endl_opt ')'
                                                                                                                                                        `-> 8: endl
                                                                                                                                                               `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '.' endl_opt ID . ENDL endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                     $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                       endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                          endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                           stmt_sep
                                                                                                                                  `-> 52: expr '.' endl_opt ID . `-> 10: endl
                                                                                                                                                                         `-> 5: ENDL



State 264

  119 var_declaration: modifier ID endl_opt type_mark . endl_opt dimensions_list
  120                | modifier ID endl_opt type_mark . dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']'

    ENDL  shift, and go to state 7
    '['   shift, and go to state 290

    '['  [reduce using rule 7 (endl_opt)]

    endl             go to state 8
    endl_opt         go to state 291
    dimensions       go to state 292
    dimensions_list  go to state 293

    shift/reduce conflict on token '[':
        7 endl_opt: %empty .
      121 dimensions: . '[' endl_opt ']'
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier ID endl_opt type_mark . '[' endl_opt ']' endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']' stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                               $end
               `-> 1: function_declaration
                      `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                        endl_opt '}'
                                                                                                   `-> 84: stmt_list                                                                                                                                                           endl_opt
                                                                                                           `-> 85: stmt
                                                                                                                   `-> 97: var_declaration                                                                                                                            stmt_sep
                                                                                                                           `-> 120: modifier ID endl_opt type_mark dimensions_list                      endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']'
                                                                                                                                                                   `-> 122: dimensions
                                                                                                                                                                            `-> 121: . '[' endl_opt ']'
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier ID endl_opt type_mark . '[' endl_opt ']' stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                      $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                        endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                           endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                                                                            stmt_sep
                                                                                                                                  `-> 119: modifier ID endl_opt type_mark endl_opt        dimensions_list
                                                                                                                                                                          `-> 7: %empty . `-> 122: dimensions
                                                                                                                                                                                                   `-> 121: '[' endl_opt ']'



State 265

  113 variable: ID endl_opt . type_mark_opt

    ':'  shift, and go to state 35

    $default  reduce using rule 111 (type_mark_opt)

    type_mark      go to state 294
    type_mark_opt  go to state 295


State 266

  115 var_init_opt: endl_opt . '=' endl_opt expr

    '='  shift, and go to state 296


State 267

  116 var_list: variable var_init_opt .

    $default  reduce using rule 116 (var_list)


State 268

  117 var_list: var_list endl_opt . ',' endl_opt variable var_init_opt

    ','  shift, and go to state 297


State 269

   76 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt stmt_list_opt endl_opt . '}'

    '}'  shift, and go to state 298


State 270

  147 class_member: property_modifier expr endl_opt . stmt_sep

    ';'   shift, and go to state 122
    ENDL  shift, and go to state 7

    endl      go to state 147
    stmt_sep  go to state 299


State 271

  143 property_modifier: visibility STATIC READONLY .

    $default  reduce using rule 143 (property_modifier)


State 272

  138 property_modifier: visibility .
  139                  | visibility . READONLY
  141                  | visibility . STATIC
  143                  | visibility . STATIC READONLY

    STATIC    shift, and go to state 224
    READONLY  shift, and go to state 225

    $default  reduce using rule 138 (property_modifier)


State 273

  151 class_visibility_member: visibility endl_opt class_member .

    $default  reduce using rule 151 (class_visibility_member)


State 274

  153 class_visibility_member_list: class_visibility_member_list endl_opt class_visibility_member .

    $default  reduce using rule 153 (class_visibility_member_list)


State 275

  156 class_declaration: CLASS endl_opt ID endl_opt extends_decl endl_opt implements_decl_opt endl_opt '{' endl_opt class_body endl_opt '}' .

    $default  reduce using rule 156 (class_declaration)


State 276

   62 do_while_stmt: DO endl_opt stmt endl_opt WHILE . endl_opt '(' endl_opt expr endl_opt ')'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 300


State 277

   63 do_while_stmt: DO endl_opt empty_stmt endl_opt WHILE . endl_opt '(' endl_opt expr endl_opt ')'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 301


State 278

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   54 if_stmt: IF endl_opt '(' endl_opt expr . endl_opt ')' endl_opt block_statement
   55        | IF endl_opt '(' endl_opt expr . endl_opt ')' endl_opt expr stmt_sep
   56        | IF endl_opt '(' endl_opt expr . endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt block_statement
   57        | IF endl_opt '(' endl_opt expr . endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt expr stmt_sep
   58        | IF endl_opt '(' endl_opt expr . endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt block_statement
   59        | IF endl_opt '(' endl_opt expr . endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt expr stmt_sep

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 302


State 279

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   64 for_stmt: FOR endl_opt '(' endl_opt expr . endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr . endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 303


State 280

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   60 while_stmt: WHILE endl_opt '(' endl_opt expr . endl_opt ')' endl_opt stmt
   61           | WHILE endl_opt '(' endl_opt expr . endl_opt ')' endl_opt empty_stmt

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 304


State 281

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   66 switch_stmt: SWITCH endl_opt '(' endl_opt expr . endl_opt ')' endl_opt '{' endl_opt case_list endl_opt '}'

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 305


State 282

   79 catch_clause: CATCH . endl_opt '(' endl_opt ID endl_opt ')' endl_opt block_statement
   80             | CATCH . endl_opt '(' endl_opt ID endl_opt ':' endl_opt error_type endl_opt ')' endl_opt block_statement

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 306


State 283

   78 try_catch_block: TRY endl_opt block_statement endl_opt catch_clause .

    $default  reduce using rule 78 (try_catch_block)


State 284

  157 enum_declaration: ENUM endl_opt ID endl_opt '{' . endl_opt id_list endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 307


State 285

   12 expr_list: expr_list endl_opt ',' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 308


State 286

   27 expr: '(' endl_opt expr endl_opt ')' .

    $default  reduce using rule 27 (expr)


State 287

   50 expr: expr '[' endl_opt expr endl_opt . ']'

    ']'  shift, and go to state 309


State 288

   49 expr: expr '?' endl_opt expr endl_opt . ':' endl_opt expr

    ':'  shift, and go to state 310


State 289

   51 expr: expr '.' endl_opt ID endl_opt . '(' endl_opt expr_list_opt endl_opt ')'

    '('  shift, and go to state 311


State 290

  121 dimensions: '[' . endl_opt ']'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 312


State 291

  119 var_declaration: modifier ID endl_opt type_mark endl_opt . dimensions_list

    '['  shift, and go to state 290

    dimensions       go to state 292
    dimensions_list  go to state 313


State 292

  122 dimensions_list: dimensions .

    $default  reduce using rule 122 (dimensions_list)


State 293

  120 var_declaration: modifier ID endl_opt type_mark dimensions_list . endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']'
  123 dimensions_list: dimensions_list . dimensions

    ENDL  shift, and go to state 7
    '['   shift, and go to state 290

    $default  reduce using rule 7 (endl_opt)

    endl        go to state 8
    endl_opt    go to state 314
    dimensions  go to state 315


State 294

  112 type_mark_opt: type_mark .

    $default  reduce using rule 112 (type_mark_opt)


State 295

  113 variable: ID endl_opt type_mark_opt .

    $default  reduce using rule 113 (variable)


State 296

  115 var_init_opt: endl_opt '=' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 316


State 297

  117 var_list: var_list endl_opt ',' . endl_opt variable var_init_opt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 317


State 298

   76 function_declaration: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt type_mark endl_opt '{' endl_opt stmt_list_opt endl_opt '}' .

    $default  reduce using rule 76 (function_declaration)


State 299

  147 class_member: property_modifier expr endl_opt stmt_sep .

    $default  reduce using rule 147 (class_member)


State 300

   62 do_while_stmt: DO endl_opt stmt endl_opt WHILE endl_opt . '(' endl_opt expr endl_opt ')'

    '('  shift, and go to state 318


State 301

   63 do_while_stmt: DO endl_opt empty_stmt endl_opt WHILE endl_opt . '(' endl_opt expr endl_opt ')'

    '('  shift, and go to state 319


State 302

   54 if_stmt: IF endl_opt '(' endl_opt expr endl_opt . ')' endl_opt block_statement
   55        | IF endl_opt '(' endl_opt expr endl_opt . ')' endl_opt expr stmt_sep
   56        | IF endl_opt '(' endl_opt expr endl_opt . ')' endl_opt block_statement endl_opt ELSE endl_opt block_statement
   57        | IF endl_opt '(' endl_opt expr endl_opt . ')' endl_opt block_statement endl_opt ELSE endl_opt expr stmt_sep
   58        | IF endl_opt '(' endl_opt expr endl_opt . ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt block_statement
   59        | IF endl_opt '(' endl_opt expr endl_opt . ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt expr stmt_sep

    ')'  shift, and go to state 320


State 303

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt . ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt . ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

    ';'  shift, and go to state 321


State 304

   60 while_stmt: WHILE endl_opt '(' endl_opt expr endl_opt . ')' endl_opt stmt
   61           | WHILE endl_opt '(' endl_opt expr endl_opt . ')' endl_opt empty_stmt

    ')'  shift, and go to state 322


State 305

   66 switch_stmt: SWITCH endl_opt '(' endl_opt expr endl_opt . ')' endl_opt '{' endl_opt case_list endl_opt '}'

    ')'  shift, and go to state 323


State 306

   79 catch_clause: CATCH endl_opt . '(' endl_opt ID endl_opt ')' endl_opt block_statement
   80             | CATCH endl_opt . '(' endl_opt ID endl_opt ':' endl_opt error_type endl_opt ')' endl_opt block_statement

    '('  shift, and go to state 324


State 307

  157 enum_declaration: ENUM endl_opt ID endl_opt '{' endl_opt . id_list endl_opt '}'

    ID  shift, and go to state 325

    id_list  go to state 326


State 308

   12 expr_list: expr_list endl_opt ',' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 327


State 309

   50 expr: expr '[' endl_opt expr endl_opt ']' .

    $default  reduce using rule 50 (expr)


State 310

   49 expr: expr '?' endl_opt expr endl_opt ':' . endl_opt expr

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 328


State 311

   51 expr: expr '.' endl_opt ID endl_opt '(' . endl_opt expr_list_opt endl_opt ')'

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 329

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '.' endl_opt ID endl_opt '(' . ENDL expr_list_opt endl_opt ')' endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                    $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                      endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                         endl_opt
                                                                                                                  `-> 85: expr
                                                                                                                          `-> 51: expr '.' endl_opt ID endl_opt '(' endl_opt             expr_list_opt endl_opt ')'
                                                                                                                                                                    `-> 8: endl
                                                                                                                                                                           `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '.' endl_opt ID endl_opt '(' . expr_list_opt ENDL ')' stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                          $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                            endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                               endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                           stmt_sep
                                                                                                                                  `-> 51: expr '.' endl_opt ID endl_opt '(' endl_opt        expr_list_opt endl_opt           ')'
                                                                                                                                                                            `-> 7: %empty .               `-> 8: endl
                                                                                                                                                                                                                 `-> 5: ENDL



State 312

  121 dimensions: '[' endl_opt . ']'

    ']'  shift, and go to state 330


State 313

  119 var_declaration: modifier ID endl_opt type_mark endl_opt dimensions_list .
  123 dimensions_list: dimensions_list . dimensions

    '['  shift, and go to state 290

    $default  reduce using rule 119 (var_declaration)

    dimensions  go to state 315


State 314

  120 var_declaration: modifier ID endl_opt type_mark dimensions_list endl_opt . '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']'

    '='  shift, and go to state 331


State 315

  123 dimensions_list: dimensions_list dimensions .

    $default  reduce using rule 123 (dimensions_list)


State 316

  115 var_init_opt: endl_opt '=' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 332


State 317

  117 var_list: var_list endl_opt ',' endl_opt . variable var_init_opt

    ID  shift, and go to state 219

    variable  go to state 333


State 318

   62 do_while_stmt: DO endl_opt stmt endl_opt WHILE endl_opt '(' . endl_opt expr endl_opt ')'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 334


State 319

   63 do_while_stmt: DO endl_opt empty_stmt endl_opt WHILE endl_opt '(' . endl_opt expr endl_opt ')'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 335


State 320

   54 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' . endl_opt block_statement
   55        | IF endl_opt '(' endl_opt expr endl_opt ')' . endl_opt expr stmt_sep
   56        | IF endl_opt '(' endl_opt expr endl_opt ')' . endl_opt block_statement endl_opt ELSE endl_opt block_statement
   57        | IF endl_opt '(' endl_opt expr endl_opt ')' . endl_opt block_statement endl_opt ELSE endl_opt expr stmt_sep
   58        | IF endl_opt '(' endl_opt expr endl_opt ')' . endl_opt expr stmt_sep endl_opt ELSE endl_opt block_statement
   59        | IF endl_opt '(' endl_opt expr endl_opt ')' . endl_opt expr stmt_sep endl_opt ELSE endl_opt expr stmt_sep

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 336


State 321

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' . endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' . endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 337


State 322

   60 while_stmt: WHILE endl_opt '(' endl_opt expr endl_opt ')' . endl_opt stmt
   61           | WHILE endl_opt '(' endl_opt expr endl_opt ')' . endl_opt empty_stmt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 338


State 323

   66 switch_stmt: SWITCH endl_opt '(' endl_opt expr endl_opt ')' . endl_opt '{' endl_opt case_list endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 339


State 324

   79 catch_clause: CATCH endl_opt '(' . endl_opt ID endl_opt ')' endl_opt block_statement
   80             | CATCH endl_opt '(' . endl_opt ID endl_opt ':' endl_opt error_type endl_opt ')' endl_opt block_statement

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 340


State 325

  158 id_list: ID . var_init_opt

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 114 (var_init_opt)]
    '='       reduce using rule 7 (endl_opt)
    $default  reduce using rule 114 (var_init_opt)

    endl          go to state 8
    endl_opt      go to state 266
    var_init_opt  go to state 341

    shift/reduce conflict on token ENDL:
      114 var_init_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt ENUM endl_opt ID endl_opt '{' ID . ENDL '=' endl_opt expr id_list endl_opt '}' endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                          $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                            endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                               endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 98: enum_declaration
                                                                                                                                  `-> 157: ENUM endl_opt ID endl_opt '{' id_list                                                     id_list endl_opt '}'
                                                                                                                                                                         `-> 158: ID var_init_opt
                                                                                                                                                                                     `-> 115: endl_opt             '=' endl_opt expr
                                                                                                                                                                                              `-> 8: endl
                                                                                                                                                                                                     `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt ENUM endl_opt ID endl_opt '{' endl_opt ID . ENDL '}' endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                       $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                         endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                            endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 98: enum_declaration
                                                                                                                                  `-> 157: ENUM endl_opt ID endl_opt '{' endl_opt id_list                       endl_opt           '}'
                                                                                                                                                                                  `-> 158: ID var_init_opt      `-> 8: endl
                                                                                                                                                                                              `-> 114: %empty .        `-> 5: ENDL



State 326

  157 enum_declaration: ENUM endl_opt ID endl_opt '{' endl_opt id_list . endl_opt '}'
  159 id_list: id_list . endl_opt ',' endl_opt ID var_init_opt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 342


State 327

   12 expr_list: expr_list endl_opt ',' endl_opt expr .
   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 12 (expr_list)


State 328

   49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt . expr

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 343


State 329

   51 expr: expr '.' endl_opt ID endl_opt '(' endl_opt . expr_list_opt endl_opt ')'

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    $default  reduce using rule 13 (expr_list_opt)

    expr_list      go to state 185
    expr_list_opt  go to state 344
    expr           go to state 187


State 330

  121 dimensions: '[' endl_opt ']' .

    $default  reduce using rule 121 (dimensions)


State 331

  120 var_declaration: modifier ID endl_opt type_mark dimensions_list endl_opt '=' . endl_opt '[' endl_opt expr_list_opt endl_opt ']'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 345


State 332

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
  115 var_init_opt: endl_opt '=' endl_opt expr .

    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 115 (var_init_opt)


State 333

  117 var_list: var_list endl_opt ',' endl_opt variable . var_init_opt

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 114 (var_init_opt)]
    '='       reduce using rule 7 (endl_opt)
    $default  reduce using rule 114 (var_init_opt)

    endl          go to state 8
    endl_opt      go to state 266
    var_init_opt  go to state 346

    shift/reduce conflict on token ENDL:
      114 var_init_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier var_list endl_opt ',' endl_opt variable . ENDL '=' endl_opt expr var_list stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                       $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                         endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                            endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                                                                                                             stmt_sep
                                                                                                                                  `-> 118: modifier var_list                                                                                         var_list
                                                                                                                                                    `-> 117: var_list endl_opt ',' endl_opt variable var_init_opt
                                                                                                                                                                                                     `-> 115: endl_opt             '=' endl_opt expr
                                                                                                                                                                                                              `-> 8: endl
                                                                                                                                                                                                                     `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier endl_opt var_list endl_opt ',' endl_opt variable . ENDL endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                    $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                      endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                         endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                                                                               stmt_sep
                                                                                                                                  `-> 118: modifier endl_opt var_list                                                           `-> 10: endl
                                                                                                                                                             `-> 117: var_list endl_opt ',' endl_opt variable var_init_opt              `-> 5: ENDL
                                                                                                                                                                                                              `-> 114: %empty .



State 334

   62 do_while_stmt: DO endl_opt stmt endl_opt WHILE endl_opt '(' endl_opt . expr endl_opt ')'

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 347


State 335

   63 do_while_stmt: DO endl_opt empty_stmt endl_opt WHILE endl_opt '(' endl_opt . expr endl_opt ')'

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 348


State 336

   54 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt . block_statement
   55        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt . expr stmt_sep
   56        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt . block_statement endl_opt ELSE endl_opt block_statement
   57        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt . block_statement endl_opt ELSE endl_opt expr stmt_sep
   58        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt . expr stmt_sep endl_opt ELSE endl_opt block_statement
   59        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt . expr stmt_sep endl_opt ELSE endl_opt expr stmt_sep

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    expr             go to state 349
    block_statement  go to state 350


State 337

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt . expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt . expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 351


State 338

   60 while_stmt: WHILE endl_opt '(' endl_opt expr endl_opt ')' endl_opt . stmt
   61           | WHILE endl_opt '(' endl_opt expr endl_opt ')' endl_opt . empty_stmt

    RETURN          shift, and go to state 61
    DO              shift, and go to state 62
    IF              shift, and go to state 63
    FOR             shift, and go to state 64
    WHILE           shift, and go to state 65
    SWITCH          shift, and go to state 66
    TRY             shift, and go to state 67
    LET             shift, and go to state 68
    CONST           shift, and go to state 69
    ENUM            shift, and go to state 70
    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    ';'             shift, and go to state 76
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    expr              go to state 84
    block_statement   go to state 85
    if_stmt           go to state 86
    while_stmt        go to state 87
    do_while_stmt     go to state 88
    for_stmt          go to state 89
    switch_stmt       go to state 90
    return_statement  go to state 91
    try_catch_block   go to state 92
    stmt              go to state 352
    empty_stmt        go to state 353
    modifier          go to state 97
    var_declaration   go to state 98
    enum_declaration  go to state 99


State 339

   66 switch_stmt: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt . '{' endl_opt case_list endl_opt '}'

    '{'  shift, and go to state 354


State 340

   79 catch_clause: CATCH endl_opt '(' endl_opt . ID endl_opt ')' endl_opt block_statement
   80             | CATCH endl_opt '(' endl_opt . ID endl_opt ':' endl_opt error_type endl_opt ')' endl_opt block_statement

    ID  shift, and go to state 355


State 341

  158 id_list: ID var_init_opt .

    $default  reduce using rule 158 (id_list)


State 342

  157 enum_declaration: ENUM endl_opt ID endl_opt '{' endl_opt id_list endl_opt . '}'
  159 id_list: id_list endl_opt . ',' endl_opt ID var_init_opt

    ','  shift, and go to state 356
    '}'  shift, and go to state 357


State 343

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   49     | expr '?' endl_opt expr endl_opt ':' endl_opt expr .
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID

    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    '='               [reduce using rule 49 (expr)]
    PLUS_ASSIGN       [reduce using rule 49 (expr)]
    MINUS_ASSIGN      [reduce using rule 49 (expr)]
    MUL_ASSIGN        [reduce using rule 49 (expr)]
    DIV_ASSIGN        [reduce using rule 49 (expr)]
    MOD_ASSIGN        [reduce using rule 49 (expr)]
    '['               [reduce using rule 49 (expr)]
    '?'               [reduce using rule 49 (expr)]
    OR                [reduce using rule 49 (expr)]
    AND               [reduce using rule 49 (expr)]
    EQUALS            [reduce using rule 49 (expr)]
    NOT_EQUALS        [reduce using rule 49 (expr)]
    '<'               [reduce using rule 49 (expr)]
    '>'               [reduce using rule 49 (expr)]
    LESS_OR_EQUAL     [reduce using rule 49 (expr)]
    GREATER_OR_EQUAL  [reduce using rule 49 (expr)]
    '+'               [reduce using rule 49 (expr)]
    '-'               [reduce using rule 49 (expr)]
    '*'               [reduce using rule 49 (expr)]
    '/'               [reduce using rule 49 (expr)]
    '%'               [reduce using rule 49 (expr)]
    POST_INCREMENT    [reduce using rule 49 (expr)]
    POST_DECREMENT    [reduce using rule 49 (expr)]
    '.'               [reduce using rule 49 (expr)]
    $default          reduce using rule 49 (expr)

    shift/reduce conflict on token POST_DECREMENT:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       15 expr: expr . POST_DECREMENT
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . POST_DECREMENT stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                              $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                   endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                               stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 15: expr . POST_DECREMENT
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . POST_DECREMENT stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                              $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                   endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                               stmt_sep
                                                                                                                                  `-> 15: expr                                                        POST_DECREMENT
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token POST_INCREMENT:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       17 expr: expr . POST_INCREMENT
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . POST_INCREMENT stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                              $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                   endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                               stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 17: expr . POST_INCREMENT
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . POST_INCREMENT stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                              $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                   endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                               stmt_sep
                                                                                                                                  `-> 17: expr                                                        POST_INCREMENT
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '+':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       29 expr: expr . '+' endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '+' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 29: expr . '+' endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '+' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 29: expr                                                        '+' endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '-':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       30 expr: expr . '-' endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '-' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 30: expr . '-' endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '-' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 30: expr                                                        '-' endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '*':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       31 expr: expr . '*' endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '*' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 31: expr . '*' endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '*' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 31: expr                                                        '*' endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '/':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       32 expr: expr . '/' endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '/' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 32: expr . '/' endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '/' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 32: expr                                                        '/' endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '%':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       33 expr: expr . '%' endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '%' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 33: expr . '%' endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '%' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 33: expr                                                        '%' endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '<':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       34 expr: expr . '<' endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '<' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 34: expr . '<' endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '<' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 34: expr                                                        '<' endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '>':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       35 expr: expr . '>' endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '>' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 35: expr . '>' endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '>' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 35: expr                                                        '>' endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token LESS_OR_EQUAL:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       36 expr: expr . LESS_OR_EQUAL endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . LESS_OR_EQUAL endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                           $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                             endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                            stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 36: expr . LESS_OR_EQUAL endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . LESS_OR_EQUAL endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                           $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                             endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                            stmt_sep
                                                                                                                                  `-> 36: expr                                                        LESS_OR_EQUAL endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token GREATER_OR_EQUAL:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       37 expr: expr . GREATER_OR_EQUAL endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . GREATER_OR_EQUAL endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                              $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                   endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                               stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 37: expr . GREATER_OR_EQUAL endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . GREATER_OR_EQUAL endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                              $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                   endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                               stmt_sep
                                                                                                                                  `-> 37: expr                                                        GREATER_OR_EQUAL endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token EQUALS:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       38 expr: expr . EQUALS endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . EQUALS endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                    $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                      endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                         endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                     stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 38: expr . EQUALS endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . EQUALS endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                    $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                      endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                         endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                     stmt_sep
                                                                                                                                  `-> 38: expr                                                        EQUALS endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token NOT_EQUALS:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       39 expr: expr . NOT_EQUALS endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . NOT_EQUALS endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                          endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                             endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                         stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 39: expr . NOT_EQUALS endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . NOT_EQUALS endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                          endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                             endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                         stmt_sep
                                                                                                                                  `-> 39: expr                                                        NOT_EQUALS endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '=':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       40 expr: expr . '=' endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '=' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 40: expr . '=' endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '=' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 40: expr                                                        '=' endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token PLUS_ASSIGN:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       41 expr: expr . PLUS_ASSIGN endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . PLUS_ASSIGN endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                         $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                           endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                              endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                          stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 41: expr . PLUS_ASSIGN endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . PLUS_ASSIGN endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                         $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                           endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                              endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                          stmt_sep
                                                                                                                                  `-> 41: expr                                                        PLUS_ASSIGN endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token MINUS_ASSIGN:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       42 expr: expr . MINUS_ASSIGN endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . MINUS_ASSIGN endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                          $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                            endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                               endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                           stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 42: expr . MINUS_ASSIGN endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . MINUS_ASSIGN endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                          $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                            endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                               endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                           stmt_sep
                                                                                                                                  `-> 42: expr                                                        MINUS_ASSIGN endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token MUL_ASSIGN:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       43 expr: expr . MUL_ASSIGN endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . MUL_ASSIGN endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                          endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                             endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                         stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 43: expr . MUL_ASSIGN endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . MUL_ASSIGN endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                          endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                             endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                         stmt_sep
                                                                                                                                  `-> 43: expr                                                        MUL_ASSIGN endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token DIV_ASSIGN:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       44 expr: expr . DIV_ASSIGN endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . DIV_ASSIGN endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                          endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                             endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                         stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 44: expr . DIV_ASSIGN endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . DIV_ASSIGN endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                          endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                             endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                         stmt_sep
                                                                                                                                  `-> 44: expr                                                        DIV_ASSIGN endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token MOD_ASSIGN:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       45 expr: expr . MOD_ASSIGN endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . MOD_ASSIGN endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                          endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                             endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                         stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 45: expr . MOD_ASSIGN endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . MOD_ASSIGN endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                          endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                             endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                         stmt_sep
                                                                                                                                  `-> 45: expr                                                        MOD_ASSIGN endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token AND:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       47 expr: expr . AND endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . AND endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 47: expr . AND endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . AND endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                  stmt_sep
                                                                                                                                  `-> 47: expr                                                        AND endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token OR:
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       48 expr: expr . OR endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . OR endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                  endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                     endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                 stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 48: expr . OR endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . OR endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                  endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                     endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                 stmt_sep
                                                                                                                                  `-> 48: expr                                                        OR endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '?':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       49 expr: expr . '?' endl_opt expr endl_opt ':' endl_opt expr
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '?' endl_opt expr endl_opt ':' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                            $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                              endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                 endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                                             stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 49: expr . '?' endl_opt expr endl_opt ':' endl_opt expr
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '?' endl_opt expr endl_opt ':' endl_opt expr stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                            $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                              endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                 endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                                             stmt_sep
                                                                                                                                  `-> 49: expr                                                        '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '[':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       50 expr: expr . '[' endl_opt expr endl_opt ']'
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '[' endl_opt expr endl_opt ']' stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                              $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                   endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                               stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 50: expr . '[' endl_opt expr endl_opt ']'
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '[' endl_opt expr endl_opt ']' stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                              $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                   endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                               stmt_sep
                                                                                                                                  `-> 50: expr                                                        '[' endl_opt expr endl_opt ']'
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '.':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       51 expr: expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')' stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                  endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                     endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                                                                 stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 51: expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')' stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                  endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                     endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                                                                 stmt_sep
                                                                                                                                  `-> 51: expr                                                        '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .

    shift/reduce conflict on token '.':
       49 expr: expr '?' endl_opt expr endl_opt ':' endl_opt expr .
       52 expr: expr . '.' endl_opt ID
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '.' endl_opt ID stmt_sep endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                               $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                 endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                    endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                stmt_sep
                                                                                                                                  `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr
                                                                                                                                                                                       `-> 52: expr . '.' endl_opt ID
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt expr '?' endl_opt expr endl_opt ':' endl_opt expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')' stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                  endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                     endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 89: expr                                                                                                                                 stmt_sep
                                                                                                                                  `-> 51: expr                                                        '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
                                                                                                                                          `-> 49: expr '?' endl_opt expr endl_opt ':' endl_opt expr .



State 344

   51 expr: expr '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt . endl_opt ')'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 358


State 345

  120 var_declaration: modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt . '[' endl_opt expr_list_opt endl_opt ']'

    '['  shift, and go to state 359


State 346

  117 var_list: var_list endl_opt ',' endl_opt variable var_init_opt .

    $default  reduce using rule 117 (var_list)


State 347

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   62 do_while_stmt: DO endl_opt stmt endl_opt WHILE endl_opt '(' endl_opt expr . endl_opt ')'

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 360


State 348

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   63 do_while_stmt: DO endl_opt empty_stmt endl_opt WHILE endl_opt '(' endl_opt expr . endl_opt ')'

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 361


State 349

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   55 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr . stmt_sep
   58        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr . stmt_sep endl_opt ELSE endl_opt block_statement
   59        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr . stmt_sep endl_opt ELSE endl_opt expr stmt_sep

    ';'               shift, and go to state 122
    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    endl      go to state 147
    stmt_sep  go to state 362


State 350

   54 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement .
   56        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement . endl_opt ELSE endl_opt block_statement
   57        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement . endl_opt ELSE endl_opt expr stmt_sep

    ELSE      reduce using rule 7 (endl_opt)
    $default  reduce using rule 54 (if_stmt)

    endl      go to state 8
    endl_opt  go to state 363


State 351

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr . endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr . endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 364


State 352

   60 while_stmt: WHILE endl_opt '(' endl_opt expr endl_opt ')' endl_opt stmt .

    $default  reduce using rule 60 (while_stmt)


State 353

   61 while_stmt: WHILE endl_opt '(' endl_opt expr endl_opt ')' endl_opt empty_stmt .

    $default  reduce using rule 61 (while_stmt)


State 354

   66 switch_stmt: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' . endl_opt case_list endl_opt '}'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 365


State 355

   79 catch_clause: CATCH endl_opt '(' endl_opt ID . endl_opt ')' endl_opt block_statement
   80             | CATCH endl_opt '(' endl_opt ID . endl_opt ':' endl_opt error_type endl_opt ')' endl_opt block_statement

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 366


State 356

  159 id_list: id_list endl_opt ',' . endl_opt ID var_init_opt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 367


State 357

  157 enum_declaration: ENUM endl_opt ID endl_opt '{' endl_opt id_list endl_opt '}' .

    $default  reduce using rule 157 (enum_declaration)


State 358

   51 expr: expr '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt . ')'

    ')'  shift, and go to state 368


State 359

  120 var_declaration: modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' . endl_opt expr_list_opt endl_opt ']'

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 369

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' . ENDL expr_list_opt endl_opt ']' endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                            $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                              endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                 endl_opt
                                                                                                                  `-> 85: var_declaration
                                                                                                                          `-> 120: modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt             expr_list_opt endl_opt ']'
                                                                                                                                                                                                            `-> 8: endl
                                                                                                                                                                                                                   `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' . expr_list_opt ENDL ']' stmt_sep endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                  $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                    endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                       endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 97: var_declaration                                                                                                                        stmt_sep
                                                                                                                                  `-> 120: modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt        expr_list_opt endl_opt           ']'
                                                                                                                                                                                                                    `-> 7: %empty .               `-> 8: endl
                                                                                                                                                                                                                                                         `-> 5: ENDL



State 360

   62 do_while_stmt: DO endl_opt stmt endl_opt WHILE endl_opt '(' endl_opt expr endl_opt . ')'

    ')'  shift, and go to state 370


State 361

   63 do_while_stmt: DO endl_opt empty_stmt endl_opt WHILE endl_opt '(' endl_opt expr endl_opt . ')'

    ')'  shift, and go to state 371


State 362

   55 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep .
   58        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep . endl_opt ELSE endl_opt block_statement
   59        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep . endl_opt ELSE endl_opt expr stmt_sep

    ELSE      reduce using rule 7 (endl_opt)
    $default  reduce using rule 55 (if_stmt)

    endl      go to state 8
    endl_opt  go to state 372


State 363

   56 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt . ELSE endl_opt block_statement
   57        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt . ELSE endl_opt expr stmt_sep

    ELSE  shift, and go to state 373


State 364

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt . ';' endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt . ';' endl_opt expr endl_opt ')' endl_opt empty_stmt

    ';'  shift, and go to state 374


State 365

   66 switch_stmt: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt . case_list endl_opt '}'

    DEFAULT  shift, and go to state 375
    CASE     shift, and go to state 376

    case_list  go to state 377
    case_stmt  go to state 378


State 366

   79 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt . ')' endl_opt block_statement
   80             | CATCH endl_opt '(' endl_opt ID endl_opt . ':' endl_opt error_type endl_opt ')' endl_opt block_statement

    ')'  shift, and go to state 379
    ':'  shift, and go to state 380


State 367

  159 id_list: id_list endl_opt ',' endl_opt . ID var_init_opt

    ID  shift, and go to state 381


State 368

   51 expr: expr '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')' .

    $default  reduce using rule 51 (expr)


State 369

  120 var_declaration: modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt . expr_list_opt endl_opt ']'

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    $default  reduce using rule 13 (expr_list_opt)

    expr_list      go to state 185
    expr_list_opt  go to state 382
    expr           go to state 187


State 370

   62 do_while_stmt: DO endl_opt stmt endl_opt WHILE endl_opt '(' endl_opt expr endl_opt ')' .

    $default  reduce using rule 62 (do_while_stmt)


State 371

   63 do_while_stmt: DO endl_opt empty_stmt endl_opt WHILE endl_opt '(' endl_opt expr endl_opt ')' .

    $default  reduce using rule 63 (do_while_stmt)


State 372

   58 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt . ELSE endl_opt block_statement
   59        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt . ELSE endl_opt expr stmt_sep

    ELSE  shift, and go to state 383


State 373

   56 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE . endl_opt block_statement
   57        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE . endl_opt expr stmt_sep

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 384


State 374

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' . endl_opt expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' . endl_opt expr endl_opt ')' endl_opt empty_stmt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 385


State 375

   71 case_stmt: DEFAULT . endl_opt ':' endl_opt stmt endl_opt break_opt
   72          | DEFAULT . endl_opt ':' endl_opt empty_stmt endl_opt break_opt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 386


State 376

   69 case_stmt: CASE . endl_opt expr endl_opt ':' endl_opt stmt endl_opt break_opt
   70          | CASE . endl_opt expr endl_opt ':' endl_opt empty_stmt endl_opt break_opt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 387


State 377

   66 switch_stmt: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list . endl_opt '}'
   68 case_list: case_list . case_stmt

    DEFAULT  shift, and go to state 375
    CASE     shift, and go to state 376
    ENDL     shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl       go to state 8
    endl_opt   go to state 388
    case_stmt  go to state 389


State 378

   67 case_list: case_stmt .

    $default  reduce using rule 67 (case_list)


State 379

   79 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ')' . endl_opt block_statement

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 390


State 380

   80 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ':' . endl_opt error_type endl_opt ')' endl_opt block_statement

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 391


State 381

  159 id_list: id_list endl_opt ',' endl_opt ID . var_init_opt

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 114 (var_init_opt)]
    '='       reduce using rule 7 (endl_opt)
    $default  reduce using rule 114 (var_init_opt)

    endl          go to state 8
    endl_opt      go to state 266
    var_init_opt  go to state 392

    shift/reduce conflict on token ENDL:
      114 var_init_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt ENUM endl_opt ID endl_opt '{' id_list endl_opt ',' endl_opt ID . ENDL '=' endl_opt expr id_list endl_opt '}' endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                        $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                          endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                             endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 98: enum_declaration
                                                                                                                                  `-> 157: ENUM endl_opt ID endl_opt '{' id_list                                                                                   id_list endl_opt '}'
                                                                                                                                                                         `-> 159: id_list endl_opt ',' endl_opt ID var_init_opt
                                                                                                                                                                                                                   `-> 115: endl_opt             '=' endl_opt expr
                                                                                                                                                                                                                            `-> 8: endl
                                                                                                                                                                                                                                   `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt ENUM endl_opt ID endl_opt '{' endl_opt id_list endl_opt ',' endl_opt ID . ENDL '}' endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                     $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                       endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                          endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 98: enum_declaration
                                                                                                                                  `-> 157: ENUM endl_opt ID endl_opt '{' endl_opt id_list                                                     endl_opt           '}'
                                                                                                                                                                                  `-> 159: id_list endl_opt ',' endl_opt ID var_init_opt      `-> 8: endl
                                                                                                                                                                                                                            `-> 114: %empty .        `-> 5: ENDL



State 382

  120 var_declaration: modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt . endl_opt ']'

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 393


State 383

   58 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE . endl_opt block_statement
   59        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE . endl_opt expr stmt_sep

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 394


State 384

   56 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt . block_statement
   57        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt . expr stmt_sep

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    expr             go to state 395
    block_statement  go to state 396


State 385

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt . expr endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt . expr endl_opt ')' endl_opt empty_stmt

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 397


State 386

   71 case_stmt: DEFAULT endl_opt . ':' endl_opt stmt endl_opt break_opt
   72          | DEFAULT endl_opt . ':' endl_opt empty_stmt endl_opt break_opt

    ':'  shift, and go to state 398


State 387

   69 case_stmt: CASE endl_opt . expr endl_opt ':' endl_opt stmt endl_opt break_opt
   70          | CASE endl_opt . expr endl_opt ':' endl_opt empty_stmt endl_opt break_opt

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82

    expr  go to state 399


State 388

   66 switch_stmt: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list endl_opt . '}'

    '}'  shift, and go to state 400


State 389

   68 case_list: case_list case_stmt .

    $default  reduce using rule 68 (case_list)


State 390

   79 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ')' endl_opt . block_statement

    '{'  shift, and go to state 83

    block_statement  go to state 401


State 391

   80 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ':' endl_opt . error_type endl_opt ')' endl_opt block_statement

    UNKNOWN  shift, and go to state 402
    ANY      shift, and go to state 403

    error_type  go to state 404


State 392

  159 id_list: id_list endl_opt ',' endl_opt ID var_init_opt .

    $default  reduce using rule 159 (id_list)


State 393

  120 var_declaration: modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt . ']'

    ']'  shift, and go to state 405


State 394

   58 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt . block_statement
   59        | IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt . expr stmt_sep

    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    expr             go to state 406
    block_statement  go to state 407


State 395

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   57 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt expr . stmt_sep

    ';'               shift, and go to state 122
    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    endl      go to state 147
    stmt_sep  go to state 408


State 396

   56 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt block_statement .

    $default  reduce using rule 56 (if_stmt)


State 397

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr . endl_opt ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr . endl_opt ')' endl_opt empty_stmt

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 409


State 398

   71 case_stmt: DEFAULT endl_opt ':' . endl_opt stmt endl_opt break_opt
   72          | DEFAULT endl_opt ':' . endl_opt empty_stmt endl_opt break_opt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 410


State 399

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   69 case_stmt: CASE endl_opt expr . endl_opt ':' endl_opt stmt endl_opt break_opt
   70          | CASE endl_opt expr . endl_opt ':' endl_opt empty_stmt endl_opt break_opt

    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 411


State 400

   66 switch_stmt: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list endl_opt '}' .

    $default  reduce using rule 66 (switch_stmt)


State 401

   79 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ')' endl_opt block_statement .

    $default  reduce using rule 79 (catch_clause)


State 402

   81 error_type: UNKNOWN .

    $default  reduce using rule 81 (error_type)


State 403

   82 error_type: ANY .

    $default  reduce using rule 82 (error_type)


State 404

   80 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ':' endl_opt error_type . endl_opt ')' endl_opt block_statement

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 412


State 405

  120 var_declaration: modifier ID endl_opt type_mark dimensions_list endl_opt '=' endl_opt '[' endl_opt expr_list_opt endl_opt ']' .

    $default  reduce using rule 120 (var_declaration)


State 406

   15 expr: expr . POST_DECREMENT
   17     | expr . POST_INCREMENT
   29     | expr . '+' endl_opt expr
   30     | expr . '-' endl_opt expr
   31     | expr . '*' endl_opt expr
   32     | expr . '/' endl_opt expr
   33     | expr . '%' endl_opt expr
   34     | expr . '<' endl_opt expr
   35     | expr . '>' endl_opt expr
   36     | expr . LESS_OR_EQUAL endl_opt expr
   37     | expr . GREATER_OR_EQUAL endl_opt expr
   38     | expr . EQUALS endl_opt expr
   39     | expr . NOT_EQUALS endl_opt expr
   40     | expr . '=' endl_opt expr
   41     | expr . PLUS_ASSIGN endl_opt expr
   42     | expr . MINUS_ASSIGN endl_opt expr
   43     | expr . MUL_ASSIGN endl_opt expr
   44     | expr . DIV_ASSIGN endl_opt expr
   45     | expr . MOD_ASSIGN endl_opt expr
   47     | expr . AND endl_opt expr
   48     | expr . OR endl_opt expr
   49     | expr . '?' endl_opt expr endl_opt ':' endl_opt expr
   50     | expr . '[' endl_opt expr endl_opt ']'
   51     | expr . '.' endl_opt ID endl_opt '(' endl_opt expr_list_opt endl_opt ')'
   52     | expr . '.' endl_opt ID
   59 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt expr . stmt_sep

    ';'               shift, and go to state 122
    ENDL              shift, and go to state 7
    '='               shift, and go to state 123
    PLUS_ASSIGN       shift, and go to state 124
    MINUS_ASSIGN      shift, and go to state 125
    MUL_ASSIGN        shift, and go to state 126
    DIV_ASSIGN        shift, and go to state 127
    MOD_ASSIGN        shift, and go to state 128
    '['               shift, and go to state 129
    '?'               shift, and go to state 130
    OR                shift, and go to state 131
    AND               shift, and go to state 132
    EQUALS            shift, and go to state 133
    NOT_EQUALS        shift, and go to state 134
    '<'               shift, and go to state 135
    '>'               shift, and go to state 136
    LESS_OR_EQUAL     shift, and go to state 137
    GREATER_OR_EQUAL  shift, and go to state 138
    '+'               shift, and go to state 139
    '-'               shift, and go to state 140
    '*'               shift, and go to state 141
    '/'               shift, and go to state 142
    '%'               shift, and go to state 143
    POST_INCREMENT    shift, and go to state 144
    POST_DECREMENT    shift, and go to state 145
    '.'               shift, and go to state 146

    endl      go to state 147
    stmt_sep  go to state 413


State 407

   58 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt block_statement .

    $default  reduce using rule 58 (if_stmt)


State 408

   57 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt block_statement endl_opt ELSE endl_opt expr stmt_sep .

    $default  reduce using rule 57 (if_stmt)


State 409

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt . ')' endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt . ')' endl_opt empty_stmt

    ')'  shift, and go to state 414


State 410

   71 case_stmt: DEFAULT endl_opt ':' endl_opt . stmt endl_opt break_opt
   72          | DEFAULT endl_opt ':' endl_opt . empty_stmt endl_opt break_opt

    RETURN          shift, and go to state 61
    DO              shift, and go to state 62
    IF              shift, and go to state 63
    FOR             shift, and go to state 64
    WHILE           shift, and go to state 65
    SWITCH          shift, and go to state 66
    TRY             shift, and go to state 67
    LET             shift, and go to state 68
    CONST           shift, and go to state 69
    ENUM            shift, and go to state 70
    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    ';'             shift, and go to state 76
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    expr              go to state 84
    block_statement   go to state 85
    if_stmt           go to state 86
    while_stmt        go to state 87
    do_while_stmt     go to state 88
    for_stmt          go to state 89
    switch_stmt       go to state 90
    return_statement  go to state 91
    try_catch_block   go to state 92
    stmt              go to state 415
    empty_stmt        go to state 416
    modifier          go to state 97
    var_declaration   go to state 98
    enum_declaration  go to state 99


State 411

   69 case_stmt: CASE endl_opt expr endl_opt . ':' endl_opt stmt endl_opt break_opt
   70          | CASE endl_opt expr endl_opt . ':' endl_opt empty_stmt endl_opt break_opt

    ':'  shift, and go to state 417


State 412

   80 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ':' endl_opt error_type endl_opt . ')' endl_opt block_statement

    ')'  shift, and go to state 418


State 413

   59 if_stmt: IF endl_opt '(' endl_opt expr endl_opt ')' endl_opt expr stmt_sep endl_opt ELSE endl_opt expr stmt_sep .

    $default  reduce using rule 59 (if_stmt)


State 414

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' . endl_opt stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' . endl_opt empty_stmt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 419


State 415

   71 case_stmt: DEFAULT endl_opt ':' endl_opt stmt . endl_opt break_opt

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 420

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt DEFAULT endl_opt ':' endl_opt stmt . ENDL break_opt endl_opt '}' endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                                      $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                                        endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                                           endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 94: switch_stmt
                                                                                                                                  `-> 66: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_stmt                                                                 endl_opt '}'
                                                                                                                                                                                                               `-> 71: DEFAULT endl_opt ':' endl_opt stmt endl_opt             break_opt
                                                                                                                                                                                                                                                          `-> 8: endl
                                                                                                                                                                                                                                                                 `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt DEFAULT endl_opt ':' endl_opt stmt . break_opt ENDL '}' endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                                                   $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                                                     endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                                                        endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 94: switch_stmt
                                                                                                                                  `-> 66: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list                                                                    endl_opt           '}'
                                                                                                                                                                                                               `-> 67: case_stmt                                                            `-> 8: endl
                                                                                                                                                                                                                       `-> 71: DEFAULT endl_opt ':' endl_opt stmt endl_opt        break_opt        `-> 5: ENDL
                                                                                                                                                                                                                                                                  `-> 7: %empty .



State 416

   72 case_stmt: DEFAULT endl_opt ':' endl_opt empty_stmt . endl_opt break_opt

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 421

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt DEFAULT endl_opt ':' endl_opt empty_stmt . ENDL break_opt endl_opt '}' endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                                            $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                                              endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                                                 endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 94: switch_stmt
                                                                                                                                  `-> 66: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_stmt                                                                       endl_opt '}'
                                                                                                                                                                                                               `-> 72: DEFAULT endl_opt ':' endl_opt empty_stmt endl_opt             break_opt
                                                                                                                                                                                                                                                                `-> 8: endl
                                                                                                                                                                                                                                                                       `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt DEFAULT endl_opt ':' endl_opt empty_stmt . break_opt ENDL '}' endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                                                         $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                                                           endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                                                              endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 94: switch_stmt
                                                                                                                                  `-> 66: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list                                                                          endl_opt           '}'
                                                                                                                                                                                                               `-> 67: case_stmt                                                                  `-> 8: endl
                                                                                                                                                                                                                       `-> 72: DEFAULT endl_opt ':' endl_opt empty_stmt endl_opt        break_opt        `-> 5: ENDL
                                                                                                                                                                                                                                                                        `-> 7: %empty .



State 417

   69 case_stmt: CASE endl_opt expr endl_opt ':' . endl_opt stmt endl_opt break_opt
   70          | CASE endl_opt expr endl_opt ':' . endl_opt empty_stmt endl_opt break_opt

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 422


State 418

   80 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ':' endl_opt error_type endl_opt ')' . endl_opt block_statement

    ENDL  shift, and go to state 7

    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 423


State 419

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt . stmt
   65         | FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt . empty_stmt

    RETURN          shift, and go to state 61
    DO              shift, and go to state 62
    IF              shift, and go to state 63
    FOR             shift, and go to state 64
    WHILE           shift, and go to state 65
    SWITCH          shift, and go to state 66
    TRY             shift, and go to state 67
    LET             shift, and go to state 68
    CONST           shift, and go to state 69
    ENUM            shift, and go to state 70
    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    ';'             shift, and go to state 76
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    expr              go to state 84
    block_statement   go to state 85
    if_stmt           go to state 86
    while_stmt        go to state 87
    do_while_stmt     go to state 88
    for_stmt          go to state 89
    switch_stmt       go to state 90
    return_statement  go to state 91
    try_catch_block   go to state 92
    stmt              go to state 424
    empty_stmt        go to state 425
    modifier          go to state 97
    var_declaration   go to state 98
    enum_declaration  go to state 99


State 420

   71 case_stmt: DEFAULT endl_opt ':' endl_opt stmt endl_opt . break_opt

    BREAK  shift, and go to state 426

    $default  reduce using rule 73 (break_opt)

    break_opt  go to state 427


State 421

   72 case_stmt: DEFAULT endl_opt ':' endl_opt empty_stmt endl_opt . break_opt

    BREAK  shift, and go to state 426

    $default  reduce using rule 73 (break_opt)

    break_opt  go to state 428


State 422

   69 case_stmt: CASE endl_opt expr endl_opt ':' endl_opt . stmt endl_opt break_opt
   70          | CASE endl_opt expr endl_opt ':' endl_opt . empty_stmt endl_opt break_opt

    RETURN          shift, and go to state 61
    DO              shift, and go to state 62
    IF              shift, and go to state 63
    FOR             shift, and go to state 64
    WHILE           shift, and go to state 65
    SWITCH          shift, and go to state 66
    TRY             shift, and go to state 67
    LET             shift, and go to state 68
    CONST           shift, and go to state 69
    ENUM            shift, and go to state 70
    NUMBER_LITERAL  shift, and go to state 71
    STRING_LITERAL  shift, and go to state 72
    TRUE_LITERAL    shift, and go to state 73
    FALSE_LITERAL   shift, and go to state 74
    ID              shift, and go to state 75
    ';'             shift, and go to state 76
    '+'             shift, and go to state 77
    '-'             shift, and go to state 78
    PREF_INCREMENT  shift, and go to state 79
    PREF_DECREMENT  shift, and go to state 80
    NOT             shift, and go to state 81
    '('             shift, and go to state 82
    '{'             shift, and go to state 83

    expr              go to state 84
    block_statement   go to state 85
    if_stmt           go to state 86
    while_stmt        go to state 87
    do_while_stmt     go to state 88
    for_stmt          go to state 89
    switch_stmt       go to state 90
    return_statement  go to state 91
    try_catch_block   go to state 92
    stmt              go to state 429
    empty_stmt        go to state 430
    modifier          go to state 97
    var_declaration   go to state 98
    enum_declaration  go to state 99


State 423

   80 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ':' endl_opt error_type endl_opt ')' endl_opt . block_statement

    '{'  shift, and go to state 83

    block_statement  go to state 431


State 424

   64 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt stmt .

    $default  reduce using rule 64 (for_stmt)


State 425

   65 for_stmt: FOR endl_opt '(' endl_opt expr endl_opt ';' endl_opt expr endl_opt ';' endl_opt expr endl_opt ')' endl_opt empty_stmt .

    $default  reduce using rule 65 (for_stmt)


State 426

   74 break_opt: BREAK . stmt_sep

    ';'   shift, and go to state 122
    ENDL  shift, and go to state 7

    endl      go to state 147
    stmt_sep  go to state 432


State 427

   71 case_stmt: DEFAULT endl_opt ':' endl_opt stmt endl_opt break_opt .

    $default  reduce using rule 71 (case_stmt)


State 428

   72 case_stmt: DEFAULT endl_opt ':' endl_opt empty_stmt endl_opt break_opt .

    $default  reduce using rule 72 (case_stmt)


State 429

   69 case_stmt: CASE endl_opt expr endl_opt ':' endl_opt stmt . endl_opt break_opt

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 433

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt CASE endl_opt expr endl_opt ':' endl_opt stmt . ENDL break_opt endl_opt '}' endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                                                 $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                                                   endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                                                      endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 94: switch_stmt
                                                                                                                                  `-> 66: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_stmt                                                                            endl_opt '}'
                                                                                                                                                                                                               `-> 69: CASE endl_opt expr endl_opt ':' endl_opt stmt endl_opt             break_opt
                                                                                                                                                                                                                                                                     `-> 8: endl
                                                                                                                                                                                                                                                                            `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt CASE endl_opt expr endl_opt ':' endl_opt stmt . break_opt ENDL '}' endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                                                              $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                                                                endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                                                                   endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 94: switch_stmt
                                                                                                                                  `-> 66: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list                                                                               endl_opt           '}'
                                                                                                                                                                                                               `-> 67: case_stmt                                                                       `-> 8: endl
                                                                                                                                                                                                                       `-> 69: CASE endl_opt expr endl_opt ':' endl_opt stmt endl_opt        break_opt        `-> 5: ENDL
                                                                                                                                                                                                                                                                             `-> 7: %empty .



State 430

   70 case_stmt: CASE endl_opt expr endl_opt ':' endl_opt empty_stmt . endl_opt break_opt

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 7 (endl_opt)]
    $default  reduce using rule 7 (endl_opt)

    endl      go to state 8
    endl_opt  go to state 434

    shift/reduce conflict on token ENDL:
        7 endl_opt: %empty .
        5 endl: . ENDL
      First example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt CASE endl_opt expr endl_opt ':' endl_opt empty_stmt . ENDL break_opt endl_opt '}' endl_opt endl_opt '}' $end
      Shift derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                                                       $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                                                         endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                                                            endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 94: switch_stmt
                                                                                                                                  `-> 66: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_stmt                                                                                  endl_opt '}'
                                                                                                                                                                                                               `-> 70: CASE endl_opt expr endl_opt ':' endl_opt empty_stmt endl_opt             break_opt
                                                                                                                                                                                                                                                                           `-> 8: endl
                                                                                                                                                                                                                                                                                  `-> 5: . ENDL
      Second example: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt CASE endl_opt expr endl_opt ':' endl_opt empty_stmt . break_opt ENDL '}' endl_opt endl_opt '}' $end
      Reduce derivation
        $accept
        `-> 0: program                                                                                                                                                                                                                                                                                                                                    $end
               `-> 1: program_elem
                      `-> 4: function_declaration
                             `-> 77: FUNC endl_opt ID endl_opt param_list_0_or_more endl_opt '{' endl_opt stmt_list_opt                                                                                                                                                                                                                      endl_opt '}'
                                                                                                          `-> 84: stmt_list                                                                                                                                                                                                         endl_opt
                                                                                                                  `-> 85: stmt
                                                                                                                          `-> 94: switch_stmt
                                                                                                                                  `-> 66: SWITCH endl_opt '(' endl_opt expr endl_opt ')' endl_opt '{' endl_opt case_list                                                                                     endl_opt           '}'
                                                                                                                                                                                                               `-> 67: case_stmt                                                                             `-> 8: endl
                                                                                                                                                                                                                       `-> 70: CASE endl_opt expr endl_opt ':' endl_opt empty_stmt endl_opt        break_opt        `-> 5: ENDL
                                                                                                                                                                                                                                                                                   `-> 7: %empty .



State 431

   80 catch_clause: CATCH endl_opt '(' endl_opt ID endl_opt ':' endl_opt error_type endl_opt ')' endl_opt block_statement .

    $default  reduce using rule 80 (catch_clause)


State 432

   74 break_opt: BREAK stmt_sep .

    $default  reduce using rule 74 (break_opt)


State 433

   69 case_stmt: CASE endl_opt expr endl_opt ':' endl_opt stmt endl_opt . break_opt

    BREAK  shift, and go to state 426

    $default  reduce using rule 73 (break_opt)

    break_opt  go to state 435


State 434

   70 case_stmt: CASE endl_opt expr endl_opt ':' endl_opt empty_stmt endl_opt . break_opt

    BREAK  shift, and go to state 426

    $default  reduce using rule 73 (break_opt)

    break_opt  go to state 436


State 435

   69 case_stmt: CASE endl_opt expr endl_opt ':' endl_opt stmt endl_opt break_opt .

    $default  reduce using rule 69 (case_stmt)


State 436

   70 case_stmt: CASE endl_opt expr endl_opt ':' endl_opt empty_stmt endl_opt break_opt .

    $default  reduce using rule 70 (case_stmt)
